ARM GAS  /tmp/ccutzvPw.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_pwr_ex.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_PWREx_ConfigSupply,"ax",%progbits
  17              		.align	1
  18              		.global	HAL_PWREx_ConfigSupply
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	HAL_PWREx_ConfigSupply:
  26              	.LFB134:
  27              		.file 1 "./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c"
   1:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
   2:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
   3:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @file    stm32h7xx_hal_pwr_ex.c
   4:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:
   8:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  10:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  11:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @attention
  12:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  13:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics.
  14:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * All rights reserved.</center></h2>
  15:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  16:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  17:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * the "License"; You may not use this file except in compliance with the
  18:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * License. You may obtain a copy of the License at:
  19:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  20:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  21:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  22:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  23:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  24:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
  25:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #include "stm32h7xx_hal.h"
  26:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  27:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
  28:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
  29:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  30:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  31:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
ARM GAS  /tmp/ccutzvPw.s 			page 2


  32:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR Extended HAL module driver
  33:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
  34:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  35:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  36:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
  37:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  38:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
  39:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
  40:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
  41:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
  42:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  43:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  44:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_AVD_Mode_Mask PWR Extended AVD Mode Mask
  45:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
  46:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  47:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_IT              ((uint32_t)0x00010000U)
  48:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_EVT             ((uint32_t)0x00020000U)
  49:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_EDGE          ((uint32_t)0x00000001U)
  50:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_FALLING_EDGE         ((uint32_t)0x00000002U)
  51:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_FALLING_EDGE  ((uint32_t)0x00000003U)
  52:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
  53:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
  54:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  55:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  56:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_REG_SET_TIMEOUT PWR Extended Flag Setting Time Out Value
  57:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
  58:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  59:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY_US  ((uint32_t)1000U)
  60:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
  61:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
  62:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  63:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  64:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_WakeUp_Pins_Offsets PWREx Wake-Up Pins masks and offsets
  65:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
  66:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  67:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins EXTI register mask */
  68:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (uint32_t)(EXTI_IMR2_IM55 | EXTI_IMR2_IM56 | \
  69:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                               EXTI_IMR2_IM57 | EXTI_IMR2_IM58 | \
  70:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                               EXTI_IMR2_IM59 | EXTI_IMR2_IM60)
  71:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  72:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins PWR Pin Pull shift offsets */
  73:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET      2U
  74:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
  75:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
  76:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  77:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  78:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  79:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
  80:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
  81:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  82:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  83:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
  84:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
  85:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
  86:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
  87:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported types ------------------------------------------------------------*/
  88:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccutzvPw.s 			page 3


  89:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
  90:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
  91:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
  92:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
  93:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  94:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Power supply control functions
  95:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power supply control functions
  96:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  97:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
  98:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  99:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 100:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Power supply control functions #####
 101:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 102:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 103:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Power supply configuration ***
 104:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ==================================
 105:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 106:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       When the system is powered on, the POR monitors VDD supply. Once VDD is above the
 107:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       POR threshold level, the voltage regulator is enabled in the default supply
 108:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       configuration:
 109:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The Voltage converter output level is set at 1.0 V in accordance with the VOS3
 110:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level configured in PWR D3 domain control register (PWR_D3CR).
 111:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The system is kept in reset mode as long as VCORE is not ok.
 112:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once VCORE is ok, the system is taken out of reset and the HSI oscillator is enabled.
 113:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the oscillator is stable, the system is initialized: Flash memory and option
 114:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           bytes are loaded and the CPU starts in Run* mode.
 115:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The software shall then initialize the system including supply configuration
 116:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           programming using the HAL_PWREx_ConfigSupply(SupplySource) with:
 117:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) SupplySource:
 118:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_LDO_SUPPLY: VCORE Power Domains are supplied from the LDO according to
 119:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                               VOS. LDO power mode (Main, LP, Off) will follow system low-power
 120:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                               modes.
 121:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_EXTERNAL_SOURCE_SUPPLY: VCORE supplied from external source and LDO bypassed,
 122:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                           voltage monitoring still active.
 123:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the supply configuration  has been configured, the HAL_PWREx_ConfigSupply
 124:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function checks the ACTVOSRDY bit in PWR control status register 1 (PWR_CSR1)
 125:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           to guarantee a valid voltage levels:
 126:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) As long as ACTVOSRDY indicates that voltage levels are invalid, the system is in
 127:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             limited Run* mode, write accesses to the RAMs are not permitted and VOS shall
 128:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             not be changed.
 129:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Once ACTVOSRDY indicates that voltage levels are valid, the system is in normal
 130:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             Run mode, write accesses to RAMs are allowed and VOS can be changed.
 131:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 132:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 133:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 134:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 135:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 136:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(SMPS)
 137:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 138:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the system Power Supply.
 139:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  SupplySource: Specifies the Power Supply source to set after a system startup.
 140:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 141:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LDO_SUPPLY                      The LDO regulator supplies the Vcore Power 
 142:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The SMPS regulator is Bypassed.
 143:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 144:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_DIRECT_SMPS_SUPPLY              The SMPS supplies the Vcore Power Domains.
 145:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The LDO is Bypassed.
ARM GAS  /tmp/ccutzvPw.s 			page 4


 146:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 147:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_LDO           The SMPS 1.8V output supplies the LDO.
 148:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from t
 149:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 150:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_LDO           The SMPS 2.5V output supplies the LDO.
 151:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from t
 152:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 153:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO   The SMPS 1.8V output supplies external circ
 154:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from t
 155:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 156:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO   The SMPS 2.5V output supplies external circ
 157:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from t
 158:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 159:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT           The SMPS 1.8V output supplies external circ
 160:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The LDO is Bypassed.
 161:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from e
 162:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 163:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT           The SMPS 2.5V output supplies external circ
 164:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The LDO is Bypassed.
 165:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from e
 166:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 167:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The SMPS and the LDO are Bypassed.
 168:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from e
 169:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 170:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 171:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
 172:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 173:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 174:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 175:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 176:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_SUPPLY(SupplySource));
 177:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 178:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LD
 179:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 180:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 181:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 182:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, can't apply a new regulator config */
 183:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 184:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 185:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 186:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 187:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 188:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 189:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 190:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 191:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 192:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 193:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 194:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 195:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 196:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 197:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 198:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 199:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 200:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 201:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 202:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
ARM GAS  /tmp/ccutzvPw.s 			page 5


 203:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 204:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 205:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT) ||
 206:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 207:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 208:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Get tick */
 209:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick();
 210:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 211:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Wait till SMPS external supply ready flag is set */
 212:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     while(!__HAL_PWR_GET_FLAG(PWR_FLAG_SMPSEXTRDY))
 213:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 214:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 215:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 216:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 217:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 218:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 219:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 220:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 221:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 222:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 223:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 224:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 225:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the system Power Supply.
 226:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  SupplySource: Specifies the Power Supply source to set after a system startup.
 227:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 228:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LDO_SUPPLY                      The LDO regulator supplies the Vcore Power 
 229:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 230:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
 231:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains are supplied from e
 232:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 233:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 234:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
 235:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
  28              		.loc 1 235 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
 236:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 237:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 238:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 239:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_SUPPLY(SupplySource));
 240:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 241:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
  41              		.loc 1 241 7
  42 0008 184B     		ldr	r3, .L6
  43 000a DB68     		ldr	r3, [r3, #12]
  44 000c 03F00403 		and	r3, r3, #4
  45              		.loc 1 241 5
ARM GAS  /tmp/ccutzvPw.s 			page 6


  46 0010 042B     		cmp	r3, #4
  47 0012 08D0     		beq	.L2
 242:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 243:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
  48              		.loc 1 243 12
  49 0014 154B     		ldr	r3, .L6
  50 0016 DB68     		ldr	r3, [r3, #12]
  51              		.loc 1 243 18
  52 0018 03F00703 		and	r3, r3, #7
  53              		.loc 1 243 7
  54 001c 7A68     		ldr	r2, [r7, #4]
  55 001e 9A42     		cmp	r2, r3
  56 0020 01D0     		beq	.L2
 244:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 245:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, can't apply a new regulator config */
 246:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  57              		.loc 1 246 14
  58 0022 0123     		movs	r3, #1
  59 0024 1DE0     		b	.L3
  60              	.L2:
 247:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 248:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 249:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 250:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 251:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
  61              		.loc 1 251 3
  62 0026 114B     		ldr	r3, .L6
  63 0028 DB68     		ldr	r3, [r3, #12]
  64 002a 23F00702 		bic	r2, r3, #7
  65 002e 0F49     		ldr	r1, .L6
  66 0030 7B68     		ldr	r3, [r7, #4]
  67 0032 1343     		orrs	r3, r3, r2
  68 0034 CB60     		str	r3, [r1, #12]
 252:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 253:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 254:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
  69              		.loc 1 254 15
  70 0036 FFF7FEFF 		bl	HAL_GetTick
  71 003a F860     		str	r0, [r7, #12]
 255:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 256:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 257:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
  72              		.loc 1 257 8
  73 003c 09E0     		b	.L4
  74              	.L5:
 258:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 259:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
  75              		.loc 1 259 9
  76 003e FFF7FEFF 		bl	HAL_GetTick
  77 0042 0246     		mov	r2, r0
  78              		.loc 1 259 23
  79 0044 FB68     		ldr	r3, [r7, #12]
  80 0046 D31A     		subs	r3, r2, r3
  81              		.loc 1 259 7
  82 0048 B3F57A7F 		cmp	r3, #1000
  83 004c 01D9     		bls	.L4
 260:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
ARM GAS  /tmp/ccutzvPw.s 			page 7


 261:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
  84              		.loc 1 261 14
  85 004e 0323     		movs	r3, #3
  86 0050 07E0     		b	.L3
  87              	.L4:
 257:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
  88              		.loc 1 257 10
  89 0052 064B     		ldr	r3, .L6
  90 0054 5B68     		ldr	r3, [r3, #4]
  91 0056 03F40053 		and	r3, r3, #8192
 257:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
  92              		.loc 1 257 8
  93 005a B3F5005F 		cmp	r3, #8192
  94 005e EED1     		bne	.L5
 262:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 263:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 264:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 265:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
  95              		.loc 1 265 10
  96 0060 0023     		movs	r3, #0
  97              	.L3:
 266:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
  98              		.loc 1 266 1
  99 0062 1846     		mov	r0, r3
 100 0064 1037     		adds	r7, r7, #16
 101              		.cfi_def_cfa_offset 8
 102 0066 BD46     		mov	sp, r7
 103              		.cfi_def_cfa_register 13
 104              		@ sp needed
 105 0068 80BD     		pop	{r7, pc}
 106              	.L7:
 107 006a 00BF     		.align	2
 108              	.L6:
 109 006c 00480258 		.word	1476544512
 110              		.cfi_endproc
 111              	.LFE134:
 113              		.section	.text.HAL_PWREx_GetSupplyConfig,"ax",%progbits
 114              		.align	1
 115              		.global	HAL_PWREx_GetSupplyConfig
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu fpv5-d16
 121              	HAL_PWREx_GetSupplyConfig:
 122              	.LFB135:
 267:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*SMPS*/
 268:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 269:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 270:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 271:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Get the power supply configuration.
 272:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The supply configuration.
 273:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 274:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t  HAL_PWREx_GetSupplyConfig(void)
 275:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 123              		.loc 1 275 1
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccutzvPw.s 			page 8


 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127              		@ link register save eliminated.
 128 0000 80B4     		push	{r7}
 129              		.cfi_def_cfa_offset 4
 130              		.cfi_offset 7, -4
 131 0002 00AF     		add	r7, sp, #0
 132              		.cfi_def_cfa_register 7
 276:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
 133              		.loc 1 276 14
 134 0004 044B     		ldr	r3, .L10
 135 0006 DB68     		ldr	r3, [r3, #12]
 136              		.loc 1 276 20
 137 0008 03F00703 		and	r3, r3, #7
 277:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 138              		.loc 1 277 1
 139 000c 1846     		mov	r0, r3
 140 000e BD46     		mov	sp, r7
 141              		.cfi_def_cfa_register 13
 142              		@ sp needed
 143 0010 5DF8047B 		ldr	r7, [sp], #4
 144              		.cfi_restore 7
 145              		.cfi_def_cfa_offset 0
 146 0014 7047     		bx	lr
 147              	.L11:
 148 0016 00BF     		.align	2
 149              	.L10:
 150 0018 00480258 		.word	1476544512
 151              		.cfi_endproc
 152              	.LFE135:
 154              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 155              		.align	1
 156              		.global	HAL_PWREx_ControlVoltageScaling
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 160              		.fpu fpv5-d16
 162              	HAL_PWREx_ControlVoltageScaling:
 163              	.LFB136:
 278:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 279:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 280:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the main internal regulator output voltage.
 281:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling: Specifies the regulator output voltage to achieve
 282:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         a tradeoff between performance and power consumption.
 283:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 284:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output range 1 mode.
 285:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output range 2 mode.
 286:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output range 3 mode.
 287:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When moving from Range 1 to Range 2, the system frequency must be decreased
 288:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         before calling HAL_PWREx_ControlVoltageScaling() API.
 289:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When moving from Range 2 to Range 1, the system frequency can be increased
 290:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         after calling HAL_PWREx_ControlVoltageScaling() API.
 291:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When moving from a Range to an other one, the API waits for VOSRDY flag to be
 292:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         set before returning the status. If the flag is not set within 1000 microseconds,
 293:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         HAL_TIMEOUT status is reported.
 294:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status
 295:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 296:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
ARM GAS  /tmp/ccutzvPw.s 			page 9


 297:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 164              		.loc 1 297 1
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168 0000 80B5     		push	{r7, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 84B0     		sub	sp, sp, #16
 173              		.cfi_def_cfa_offset 24
 174 0004 00AF     		add	r7, sp, #0
 175              		.cfi_def_cfa_register 7
 176 0006 7860     		str	r0, [r7, #4]
 298:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 299:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 300:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));
 301:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 302:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 303:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 177              		.loc 1 303 3
 178 0008 104B     		ldr	r3, .L16
 179 000a 9B69     		ldr	r3, [r3, #24]
 180 000c 23F44042 		bic	r2, r3, #49152
 181 0010 0E49     		ldr	r1, .L16
 182 0012 7B68     		ldr	r3, [r7, #4]
 183 0014 1343     		orrs	r3, r3, r2
 184 0016 8B61     		str	r3, [r1, #24]
 304:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 305:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 306:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 185              		.loc 1 306 15
 186 0018 FFF7FEFF 		bl	HAL_GetTick
 187 001c F860     		str	r0, [r7, #12]
 307:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 308:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait until the VOSRDY flag is set */
 309:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 188              		.loc 1 309 8
 189 001e 09E0     		b	.L13
 190              	.L15:
 310:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 311:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 191              		.loc 1 311 9
 192 0020 FFF7FEFF 		bl	HAL_GetTick
 193 0024 0246     		mov	r2, r0
 194              		.loc 1 311 23
 195 0026 FB68     		ldr	r3, [r7, #12]
 196 0028 D31A     		subs	r3, r2, r3
 197              		.loc 1 311 7
 198 002a B3F57A7F 		cmp	r3, #1000
 199 002e 01D9     		bls	.L13
 312:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 313:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 200              		.loc 1 313 14
 201 0030 0323     		movs	r3, #3
 202 0032 07E0     		b	.L14
 203              	.L13:
ARM GAS  /tmp/ccutzvPw.s 			page 10


 309:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 204              		.loc 1 309 10
 205 0034 054B     		ldr	r3, .L16
 206 0036 9B69     		ldr	r3, [r3, #24]
 207 0038 03F40053 		and	r3, r3, #8192
 309:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 208              		.loc 1 309 8
 209 003c B3F5005F 		cmp	r3, #8192
 210 0040 EED1     		bne	.L15
 314:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 315:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 316:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 317:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 211              		.loc 1 317 10
 212 0042 0023     		movs	r3, #0
 213              	.L14:
 318:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 214              		.loc 1 318 1
 215 0044 1846     		mov	r0, r3
 216 0046 1037     		adds	r7, r7, #16
 217              		.cfi_def_cfa_offset 8
 218 0048 BD46     		mov	sp, r7
 219              		.cfi_def_cfa_register 13
 220              		@ sp needed
 221 004a 80BD     		pop	{r7, pc}
 222              	.L17:
 223              		.align	2
 224              	.L16:
 225 004c 00480258 		.word	1476544512
 226              		.cfi_endproc
 227              	.LFE136:
 229              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 230              		.align	1
 231              		.global	HAL_PWREx_GetVoltageRange
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu fpv5-d16
 237              	HAL_PWREx_GetVoltageRange:
 238              	.LFB137:
 319:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 320:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 321:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Get the main internal regulator output voltage.
 322:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Reflecting the last VOS value applied to the PMU.
 323:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The actual applied VOS for VDD11 Voltage Scaling selection.
 324:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 325:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t  HAL_PWREx_GetVoltageRange(void)
 326:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 239              		.loc 1 326 1
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244 0000 80B4     		push	{r7}
 245              		.cfi_def_cfa_offset 4
 246              		.cfi_offset 7, -4
 247 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccutzvPw.s 			page 11


 248              		.cfi_def_cfa_register 7
 327:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CSR1 & PWR_CSR1_ACTVOS);
 249              		.loc 1 327 14
 250 0004 044B     		ldr	r3, .L20
 251 0006 5B68     		ldr	r3, [r3, #4]
 252              		.loc 1 327 21
 253 0008 03F44043 		and	r3, r3, #49152
 328:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 254              		.loc 1 328 1
 255 000c 1846     		mov	r0, r3
 256 000e BD46     		mov	sp, r7
 257              		.cfi_def_cfa_register 13
 258              		@ sp needed
 259 0010 5DF8047B 		ldr	r7, [sp], #4
 260              		.cfi_restore 7
 261              		.cfi_def_cfa_offset 0
 262 0014 7047     		bx	lr
 263              	.L21:
 264 0016 00BF     		.align	2
 265              	.L20:
 266 0018 00480258 		.word	1476544512
 267              		.cfi_endproc
 268              	.LFE137:
 270              		.section	.text.HAL_PWREx_ControlStopModeVoltageScaling,"ax",%progbits
 271              		.align	1
 272              		.global	HAL_PWREx_ControlStopModeVoltageScaling
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu fpv5-d16
 278              	HAL_PWREx_ControlStopModeVoltageScaling:
 279              	.LFB138:
 329:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 330:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 331:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the main internal regulator output voltage in STOP mode.
 332:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling: Specifies the regulator output voltage when the system enters
 333:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Stop mode to achieve a tradeoff between performance and power consumption.
 334:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 335:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE3: Regulator voltage output range 3 mode.
 336:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE4: Regulator voltage output range 4 mode.
 337:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE5: Regulator voltage output range 5 mode.
 338:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The Stop mode voltage scaling for SVOS4 and SVOS5 sets the voltage regulator
 339:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in Low-power (LP) mode to further reduce power consumption.
 340:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When preselecting SVOS3, the use of the voltage regulator low-power mode (LP)
 341:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         can be selected by LPDS register bit.
 342:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay when exiting
 343:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         from system Stop mode.
 344:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status
 345:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 346:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling(uint32_t VoltageScaling)
 347:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 280              		.loc 1 347 1
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 8
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 285 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccutzvPw.s 			page 12


 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 7, -4
 288 0002 83B0     		sub	sp, sp, #12
 289              		.cfi_def_cfa_offset 16
 290 0004 00AF     		add	r7, sp, #0
 291              		.cfi_def_cfa_register 7
 292 0006 7860     		str	r0, [r7, #4]
 348:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_STOP_MODE_REGULATOR_VOLTAGE(VoltageScaling));
 349:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 350:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the stop mode voltage range */
 351:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
 293              		.loc 1 351 3
 294 0008 074B     		ldr	r3, .L24
 295 000a 1B68     		ldr	r3, [r3]
 296 000c 23F44042 		bic	r2, r3, #49152
 297 0010 0549     		ldr	r1, .L24
 298 0012 7B68     		ldr	r3, [r7, #4]
 299 0014 1343     		orrs	r3, r3, r2
 300 0016 0B60     		str	r3, [r1]
 352:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 353:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 301              		.loc 1 353 10
 302 0018 0023     		movs	r3, #0
 354:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 303              		.loc 1 354 1
 304 001a 1846     		mov	r0, r3
 305 001c 0C37     		adds	r7, r7, #12
 306              		.cfi_def_cfa_offset 4
 307 001e BD46     		mov	sp, r7
 308              		.cfi_def_cfa_register 13
 309              		@ sp needed
 310 0020 5DF8047B 		ldr	r7, [sp], #4
 311              		.cfi_restore 7
 312              		.cfi_def_cfa_offset 0
 313 0024 7047     		bx	lr
 314              	.L25:
 315 0026 00BF     		.align	2
 316              	.L24:
 317 0028 00480258 		.word	1476544512
 318              		.cfi_endproc
 319              	.LFE138:
 321              		.section	.text.HAL_PWREx_GetStopModeVoltageRange,"ax",%progbits
 322              		.align	1
 323              		.global	HAL_PWREx_GetStopModeVoltageRange
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu fpv5-d16
 329              	HAL_PWREx_GetStopModeVoltageRange:
 330              	.LFB139:
 355:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 356:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 357:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Get the main internal regulator output voltage in STOP mode.
 358:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The actual applied VOS for VDD11 Voltage Scaling selection.
 359:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 360:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t  HAL_PWREx_GetStopModeVoltageRange(void)
 361:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
ARM GAS  /tmp/ccutzvPw.s 			page 13


 331              		.loc 1 361 1
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336 0000 80B4     		push	{r7}
 337              		.cfi_def_cfa_offset 4
 338              		.cfi_offset 7, -4
 339 0002 00AF     		add	r7, sp, #0
 340              		.cfi_def_cfa_register 7
 362:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_CR1_SVOS);
 341              		.loc 1 362 14
 342 0004 044B     		ldr	r3, .L28
 343 0006 1B68     		ldr	r3, [r3]
 344              		.loc 1 362 20
 345 0008 03F44043 		and	r3, r3, #49152
 363:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 346              		.loc 1 363 1
 347 000c 1846     		mov	r0, r3
 348 000e BD46     		mov	sp, r7
 349              		.cfi_def_cfa_register 13
 350              		@ sp needed
 351 0010 5DF8047B 		ldr	r7, [sp], #4
 352              		.cfi_restore 7
 353              		.cfi_def_cfa_offset 0
 354 0014 7047     		bx	lr
 355              	.L29:
 356 0016 00BF     		.align	2
 357              	.L28:
 358 0018 00480258 		.word	1476544512
 359              		.cfi_endproc
 360              	.LFE139:
 362              		.section	.text.HAL_PWREx_EnterSTOPMode,"ax",%progbits
 363              		.align	1
 364              		.global	HAL_PWREx_EnterSTOPMode
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu fpv5-d16
 370              	HAL_PWREx_EnterSTOPMode:
 371              	.LFB140:
 364:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 365:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 366:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 367:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 368:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 369:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group2 Low power control functions
 370:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Low power control functions
 371:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 372:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 373:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 374:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 375:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Low power control functions #####
 376:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 377:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 378:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Domains Low Power modes configuration ***
 379:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================================
ARM GAS  /tmp/ccutzvPw.s 			page 14


 380:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 381:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The system present 3 principles domains (D1, D2 and D3) that can be operated
 382:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       in low-power modes (DSTOP or DSTANDBY mode):
 383:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 384:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTOP mode to enters a domain to STOP mode:
 385:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D1 domain and/or D2 domain enters DSTOP mode only when the CPU
 386:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             subsystem is in CSTOP mode and has allocated peripheral in the domain.
 387:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             In DSTOP mode the domain bus matrix clock is stopped.
 388:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STOP mode using one of the following scenarios:
 389:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 domain enters DSTANDBY mode (powered off) and D2, D3 domains enter DSTOP mode.
 390:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 domain enters DSTANDBY mode (powered off) and D1, D3 domains enter DSTOP mode.
 391:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D3 domain enters DSTANDBY mode (powered off) and D1, D2 domains enter DSTOP mode.
 392:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D2 domains enter DSTANDBY mode (powered off) and D3 domain enters DSTOP mode.
 393:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D3 domains enter DSTANDBY mode (powered off) and D2 domain enters DSTOP mode.
 394:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 and D3 domains enter DSTANDBY mode (powered off) and D1 domain enters DSTOP mode.
 395:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1, D2 and D3 domains enter DSTOP mode.
 396:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) When the system enters STOP mode, the clocks are stopped and the regulator is running
 397:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             in main or low power mode.
 398:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D3 domain can be kept in Run mode regardless of the CPU status when enter
 399:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function.
 400:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 401:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTANDBY mode to enters a domain to STANDBY mode:
 402:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The DSTANDBY mode is entered when the PDDS_Dn bit in PWR CPU control register
 403:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             (PWR_CPUCR) for the Dn domain selects Standby mode.
 404:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STANDBY mode only when D1, D2 and D3 domains enter DSTANDBY mode.
 405:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             Consequently the VCORE supply regulator is powered off.
 406:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 407:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTOP mode ***
 408:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ==================
 409:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 410:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode the domain bus matrix clock is stopped.
 411:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The Flash memory can enter low-power Stop mode when it is enabled through FLPS in
 412:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       PWR_CR1 register. This allows a trade-off between domain DStop restart time and low
 413:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       power consumption.
 414:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 415:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode domain peripherals using the LSI or LSE clock and peripherals having a
 416:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       kernel clock request are still able to operate.
 417:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 418:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTOP mode it is recommended to call SCB_CleanDCache function
 419:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       in order to clean the D-Cache and guarantee the data integrity for the SRAM memories.
 420:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 421:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 422:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTOP mode is entered using the HAL_PWREx_EnterSTOPMode(Regulator, STOPEntry, Domain)
 423:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          function with:
 424:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Regulator:
 425:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_MAINREGULATOR_ON: Main regulator ON.
 426:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_LOWPOWERREGULATOR_ON: Low Power regulator ON.
 427:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) STOPEntry:
 428:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFI: enter STOP mode with WFI instruction
 429:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFE: enter STOP mode with WFE instruction
 430:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Domain:
 431:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D1_DOMAIN: Enters D1 domain to DSTOP mode.
 432:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D2_DOMAIN: Enters D2 domain to DSTOP mode.
 433:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D3_DOMAIN: Enters D3 domain to DSTOP mode.
 434:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 435:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 436:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
ARM GAS  /tmp/ccutzvPw.s 			page 15


 437:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 438:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTANDBY mode ***
 439:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ====================
 440:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 441:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStandby mode:
 442:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain bus matrix clock is stopped.
 443:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain is powered down and the domain RAM and register contents are lost.
 444:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 445:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTANDBY mode it is recommended to call SCB_CleanDCache function
 446:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       in order to clean the D-Cache and guarantee the data integrity for the SRAM memories.
 447:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 448:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 449:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTANDBY mode is entered using the HAL_PWREx_EnterSTANDBYMode(Domain) function with:
 450:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Domain:
 451:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D1_DOMAIN: Enters D1 domain to DSTANDBY mode.
 452:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D2_DOMAIN: Enters D2 domain to DSTANDBY mode.
 453:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D3_DOMAIN: Enters D3 domain to DSTANDBY mode.
 454:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 455:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 456:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B), RTC
 457:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         wakeup, tamper event, time stamp event, external reset in NRST pin, IWDG reset.
 458:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 459:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** Keep D3 in RUN mode ***
 460:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ===========================
 461:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 462:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       D3 domain can be kept in Run mode regardless of the CPU status when enter
 463:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function with:
 464:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) D3State:
 465:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_STOP: D3 domain will follow the CPU sub-system mode.
 466:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_RUN: D3 domain remains in Run mode regardless of CPU subsystem mode.
 467:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 468:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
 469:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =======================================
 470:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 471:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       By setting the FLPS bit in the PWR_CR1 register using the HAL_PWREx_EnableFlashPowerDown()
 472:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function, the Flash memory also enters power down mode when the device enters Stop mode.
 473:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       When the Flash memory is in power down mode, an additional startup delay is incurred when
 474:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       waking up from Stop mode.
 475:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 476:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Wakeup Pins configuration ****
 477:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
 478:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 479:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Wakeup pins allow the system to exit from Standby mode. The configuration of
 480:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       wakeup pins is done with the HAL_PWREx_EnableWakeUpPin(sPinParams) function with:
 481:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) sPinParams: structure to enable and configure a wakeup pin:
 482:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) WakeUpPin: Wakeup pin to be enabled.
 483:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPolarity: Wakeup pin polarity (rising or falling edge).
 484:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPull: Wakeup pin pull (no pull, pull-up or pull-down).
 485:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 486:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The wakeup pins are internally connected to the EXTI lines [55-60] to generate an interrupt
 487:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if enabled. The EXTI lines configuration is done by the HAL_EXTI_Dx_EventInputConfig() functi
 488:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       defined in the stm32h7xxhal.c file.
 489:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 490:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       When a wakeup pin event is received the HAL_PWREx_WAKEUP_PIN_IRQHandler is called
 491:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       and the appropriate flag is set in the PWR_WKUPFR register. Then in the HAL_PWREx_WAKEUP_PIN_
 492:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function the wakeup pin flag will be cleared and the appropriate user callback will be called
 493:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The user can add his own code by customization of function pointer HAL_PWREx_WKUPx_Callback.
ARM GAS  /tmp/ccutzvPw.s 			page 16


 494:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 495:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 496:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 497:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 498:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 499:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 500:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enter a Domain to DSTOP mode.
 501:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop mode the domain bus matrix clock is stopped.
 502:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3 domain enters Stop mode only when the CPU subsystem is in CStop mode,
 503:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the EXTI wakeup sources are inactive and at least one PDDS_Dn bit in PWR CPU
 504:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         control register (PWR_CPUCR) for any domain request Stop.
 505:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In system D3 domain Stop mode, D1 domain and D2 domain are either in DStop and/or
 506:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         DStandby mode.
 507:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTOP mode it is recommended to call SCB_CleanDCache function
 508:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in order to clean the D-Cache and guarantee the data integrity for the SRAM memories.
 509:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In System Stop mode, the domain peripherals that use the LSI or LSE clock, and the
 510:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         peripherals that have a kernel clock request to select HSI or CSI as source,
 511:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         are still able to operate.
 512:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator: Specifies the regulator state in Stop mode.
 513:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 514:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 515:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 516:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry: Specifies if Stop mode in entered with WFI or WFE instruction.
 517:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 518:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI: Enter DStop mode with WFI instruction
 519:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE: Enter DStop mode with WFE instruction
 520:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain: Specifies the Domain to enter STOP mode.
 521:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 522:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN: Enter D1 Domain to DSTOP mode.
 523:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTOP mode.
 524:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN: Enter D3 Domain to DSTOP mode.
 525:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 526:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 527:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
 528:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 372              		.loc 1 528 1
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 16
 375              		@ frame_needed = 1, uses_anonymous_args = 0
 376              		@ link register save eliminated.
 377 0000 80B4     		push	{r7}
 378              		.cfi_def_cfa_offset 4
 379              		.cfi_offset 7, -4
 380 0002 85B0     		sub	sp, sp, #20
 381              		.cfi_def_cfa_offset 24
 382 0004 00AF     		add	r7, sp, #0
 383              		.cfi_def_cfa_register 7
 384 0006 F860     		str	r0, [r7, #12]
 385 0008 0B46     		mov	r3, r1
 386 000a 7A60     		str	r2, [r7, #4]
 387 000c FB72     		strb	r3, [r7, #11]
 529:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 530:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 531:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 532:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_DOMAIN(Domain));
 533:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 534:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
ARM GAS  /tmp/ccutzvPw.s 			page 17


 535:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPDS, Regulator);
 388              		.loc 1 535 3
 389 000e 1F4B     		ldr	r3, .L37
 390 0010 1B68     		ldr	r3, [r3]
 391 0012 23F00102 		bic	r2, r3, #1
 392 0016 1D49     		ldr	r1, .L37
 393 0018 FB68     		ldr	r3, [r7, #12]
 394 001a 1343     		orrs	r3, r3, r2
 395 001c 0B60     		str	r3, [r1]
 536:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 537:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 538:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 396              		.loc 1 538 6
 397 001e 7B68     		ldr	r3, [r7, #4]
 398 0020 002B     		cmp	r3, #0
 399 0022 1CD1     		bne	.L31
 539:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 540:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check Core */
 541:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     assert_param(IS_PWR_D1_CPU(HAL_GetCurrentCPUID()));
 542:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 543:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D1 domain enters Deepsleep */
 544:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 400              		.loc 1 544 5
 401 0024 194B     		ldr	r3, .L37
 402 0026 1B69     		ldr	r3, [r3, #16]
 403 0028 184A     		ldr	r2, .L37
 404 002a 23F00103 		bic	r3, r3, #1
 405 002e 1361     		str	r3, [r2, #16]
 545:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 546:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 547:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_PDDS_D1);
 548:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 549:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 550:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 551:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 406              		.loc 1 551 14
 407 0030 174B     		ldr	r3, .L37+4
 408 0032 1B69     		ldr	r3, [r3, #16]
 409 0034 164A     		ldr	r2, .L37+4
 410 0036 43F00403 		orr	r3, r3, #4
 411 003a 1361     		str	r3, [r2, #16]
 412              	.LBB14:
 413              	.LBB15:
 414              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.1
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     02. February 2017
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
ARM GAS  /tmp/ccutzvPw.s 			page 18


  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  36:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                     __asm
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  39:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                  inline
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  48:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
  49:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  50:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  55:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wpacked"
  56:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wattributes"
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic pop
  59:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  60:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
  62:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  66:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT           struct __attribute__((packed, aligned(1)))
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccutzvPw.s 			page 19


  71:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  74:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  75:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  77:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  78:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  80:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  81:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  84:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 115:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 119:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 121:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 122:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 123:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 125:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccutzvPw.s 			page 20


 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 129:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 131:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 134:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 136:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 137:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 138:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 139:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 143:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 147:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 149:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 150:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 152:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 153:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 155:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 156:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 157:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 159:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 160:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
ARM GAS  /tmp/ccutzvPw.s 			page 21


 185:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 187:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 189:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 190:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 192:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 195:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 196:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 199:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 200:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 201:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 204:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 206:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 210:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 211:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 213:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 214:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 218:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 220:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 221:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 222:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 223:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 224:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 225:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 227:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 229:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 230:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 234:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 235:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 240:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 241:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
ARM GAS  /tmp/ccutzvPw.s 			page 22


 242:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 244:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 246:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 247:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 250:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 251:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 254:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 257:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 258:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 261:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 266:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 267:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 268:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 270:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 271:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 273:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 275:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 276:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 289:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 293:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 294:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 297:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 298:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccutzvPw.s 			page 23


 299:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 301:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 305:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 306:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 307:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 308:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 310:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 312:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 314:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 317:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 319:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 325:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 326:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 328:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 329:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 331:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 332:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 334:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 335:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 336:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 337:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 340:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 347:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 348:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 349:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 350:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 353:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 354:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccutzvPw.s 			page 24


 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 362:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 363:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 364:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 365:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 368:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 370:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 371:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 373:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 374:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 376:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 377:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 378:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 379:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 380:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 381:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 382:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 383:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 384:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 385:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 386:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 387:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 388:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 389:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 390:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 391:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 393:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 394:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 398:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 399:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 400:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 401:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 402:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 404:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 406:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 408:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 409:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 410:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 411:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 412:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccutzvPw.s 			page 25


 413:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 414:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 415:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 416:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 417:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 418:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 419:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 420:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 421:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 422:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 423:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 424:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 425:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 426:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 427:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 428:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 429:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 430:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 431:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 432:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 433:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 434:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 435:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 437:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 438:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 439:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 440:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 441:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 442:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 443:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 444:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 445:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 446:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 447:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 449:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 450:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 451:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 452:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 453:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 455:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 457:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 459:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 460:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 464:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 465:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 466:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 467:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 468:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
ARM GAS  /tmp/ccutzvPw.s 			page 26


 470:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 474:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 477:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 479:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 480:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 481:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 482:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 483:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 485:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 487:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 488:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 489:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 490:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 491:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 492:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 493:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 494:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 495:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 496:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 497:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 498:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 499:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 501:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 503:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 504:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 505:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 506:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 507:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 508:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 509:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 512:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 513:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 514:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 515:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 516:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 517:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 518:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 520:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 521:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 522:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 524:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 525:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 526:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccutzvPw.s 			page 27


 527:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 528:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 529:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 530:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 531:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 532:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 533:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 534:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 536:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 537:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 538:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 539:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 540:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 541:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 542:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 543:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 544:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 545:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 546:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 547:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 548:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 549:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 553:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 556:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 557:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 558:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 559:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 560:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 561:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 562:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 563:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 564:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 565:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 566:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 567:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 568:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 569:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 570:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 571:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 572:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 573:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 574:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 576:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 578:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 579:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 581:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 582:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 583:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccutzvPw.s 			page 28


 584:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 585:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 586:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 587:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 588:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 589:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 590:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 591:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 592:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 593:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 594:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 595:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 596:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 599:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 600:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 601:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 602:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 603:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 604:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 605:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 606:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 607:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 608:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 609:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 610:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 611:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 612:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 613:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 614:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 615:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 616:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 617:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 618:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 619:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 620:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 621:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 622:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 623:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 624:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 625:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 626:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 627:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 628:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 630:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 631:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 632:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 633:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 634:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 635:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 636:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 637:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 638:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 639:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 640:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
ARM GAS  /tmp/ccutzvPw.s 			page 29


 641:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 642:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 643:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0U);
 644:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 645:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 646:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 649:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 650:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 651:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 652:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 653:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 654:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 655:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 656:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 657:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 658:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 659:./Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 660:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 661:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 662:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 663:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 664:./Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 665:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 666:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 667:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 668:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 669:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 671:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 672:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 673:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 674:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 675:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 676:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 677:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 678:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 679:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 680:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 681:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 682:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 683:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 684:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 685:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 686:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 687:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 688:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 689:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 690:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 691:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 692:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 693:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 694:./Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 695:./Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 696:./Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("nop");
 697:./Drivers/CMSIS/Include/cmsis_gcc.h **** //}
ARM GAS  /tmp/ccutzvPw.s 			page 30


 698:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 699:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 702:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 703:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:./Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 705:./Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 706:./Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 707:./Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 708:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 709:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 710:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 711:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 712:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 713:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 714:./Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 715:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 716:./Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 717:./Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 718:./Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 719:./Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 720:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 721:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 723:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 724:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 725:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 726:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 727:./Drivers/CMSIS/Include/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 728:./Drivers/CMSIS/Include/cmsis_gcc.h **** //{
 729:./Drivers/CMSIS/Include/cmsis_gcc.h **** //  __ASM volatile ("sev");
 730:./Drivers/CMSIS/Include/cmsis_gcc.h **** //}
 731:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 732:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 733:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 734:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 735:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 736:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 737:./Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 738:./Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 739:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 740:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 741:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 742:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 743:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 744:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 745:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 746:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 747:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 748:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 749:./Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 750:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 751:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 752:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 753:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 415              		.loc 2 753 3
ARM GAS  /tmp/ccutzvPw.s 			page 31


 416              		.syntax unified
 417              	@ 753 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 418 003c BFF34F8F 		dsb 0xF
 419              	@ 0 "" 2
 420              		.thumb
 421              		.syntax unified
 422              	.LBE15:
 423              	.LBE14:
 424              	.LBB16:
 425              	.LBB17:
 742:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 426              		.loc 2 742 3
 427              		.syntax unified
 428              	@ 742 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 429 0040 BFF36F8F 		isb 0xF
 430              	@ 0 "" 2
 431              		.thumb
 432              		.syntax unified
 433              	.LBE17:
 434              	.LBE16:
 552:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 553:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions done before entering STOP mode */
 554:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB();
 555:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB();
 556:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 557:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 558:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if(STOPEntry == PWR_STOPENTRY_WFI)
 435              		.loc 1 558 7
 436 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 437 0046 012B     		cmp	r3, #1
 438 0048 01D1     		bne	.L32
 559:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 560:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 561:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI();
 439              		.loc 1 561 7
 440              		.syntax unified
 441              	@ 561 "./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 442 004a 30BF     		wfi
 443              	@ 0 "" 2
 444              		.thumb
 445              		.syntax unified
 446 004c 00E0     		b	.L33
 447              	.L32:
 562:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 563:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 564:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 565:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 566:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE();
 448              		.loc 1 566 7
 449              		.syntax unified
 450              	@ 566 "./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 451 004e 20BF     		wfe
 452              	@ 0 "" 2
 453              		.thumb
 454              		.syntax unified
 455              	.L33:
 567:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
ARM GAS  /tmp/ccutzvPw.s 			page 32


 568:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 569:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset SLEEPDEEP bit of Cortex System Control Register */
 570:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 456              		.loc 1 570 14
 457 0050 0F4B     		ldr	r3, .L37+4
 458 0052 1B69     		ldr	r3, [r3, #16]
 459 0054 0E4A     		ldr	r2, .L37+4
 460 0056 23F00403 		bic	r3, r3, #4
 461 005a 1361     		str	r3, [r2, #16]
 571:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 572:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 573:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 574:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 575:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 576:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 577:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 578:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check Core */
 579:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     assert_param(IS_PWR_D2_CPU(HAL_GetCurrentCPUID()));
 580:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 581:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 582:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 583:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 584:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 585:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 586:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions done before entering STOP mode */
 587:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB();
 588:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB();
 589:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 590:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 591:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if(STOPEntry == PWR_STOPENTRY_WFI)
 592:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 593:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 594:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI();
 595:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 596:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 597:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 598:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 599:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE();
 600:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 601:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 602:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset SLEEPDEEP bit of Cortex System Control Register */
 603:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 604:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 605:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 606:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 607:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 608:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D3 domain enters Deepsleep */
 609:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 610:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 611:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 612:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 613:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 614:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 615:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 462              		.loc 1 615 1
 463 005c 0FE0     		b	.L36
 464              	.L31:
ARM GAS  /tmp/ccutzvPw.s 			page 33


 572:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 465              		.loc 1 572 11
 466 005e 7B68     		ldr	r3, [r7, #4]
 467 0060 012B     		cmp	r3, #1
 468 0062 06D1     		bne	.L35
 575:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 469              		.loc 1 575 5
 470 0064 094B     		ldr	r3, .L37
 471 0066 1B69     		ldr	r3, [r3, #16]
 472 0068 084A     		ldr	r2, .L37
 473 006a 23F00203 		bic	r3, r3, #2
 474 006e 1361     		str	r3, [r2, #16]
 475              		.loc 1 615 1
 476 0070 05E0     		b	.L36
 477              	.L35:
 609:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 478              		.loc 1 609 5
 479 0072 064B     		ldr	r3, .L37
 480 0074 1B69     		ldr	r3, [r3, #16]
 481 0076 054A     		ldr	r2, .L37
 482 0078 23F00403 		bic	r3, r3, #4
 483 007c 1361     		str	r3, [r2, #16]
 484              	.L36:
 485              		.loc 1 615 1
 486 007e 00BF     		nop
 487 0080 1437     		adds	r7, r7, #20
 488              		.cfi_def_cfa_offset 4
 489 0082 BD46     		mov	sp, r7
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 0084 5DF8047B 		ldr	r7, [sp], #4
 493              		.cfi_restore 7
 494              		.cfi_def_cfa_offset 0
 495 0088 7047     		bx	lr
 496              	.L38:
 497 008a 00BF     		.align	2
 498              	.L37:
 499 008c 00480258 		.word	1476544512
 500 0090 00ED00E0 		.word	-536810240
 501              		.cfi_endproc
 502              	.LFE140:
 504              		.section	.text.HAL_PWREx_ClearPendingEvent,"ax",%progbits
 505              		.align	1
 506              		.global	HAL_PWREx_ClearPendingEvent
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu fpv5-d16
 512              	HAL_PWREx_ClearPendingEvent:
 513              	.LFB141:
 616:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 617:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 618:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 619:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Clear pending event.
 620:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API clear the pending event in order to enter a given domain to DSTOP. It should
 621:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         be called just before enter low power mode APIs using Wait For Event request.
 622:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
ARM GAS  /tmp/ccutzvPw.s 			page 34


 623:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 624:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearPendingEvent(void)
 625:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 514              		.loc 1 625 1
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 1, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 519 0000 80B4     		push	{r7}
 520              		.cfi_def_cfa_offset 4
 521              		.cfi_offset 7, -4
 522 0002 00AF     		add	r7, sp, #0
 523              		.cfi_def_cfa_register 7
 626:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 627:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check Core */
 628:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(HAL_GetCurrentCPUID() == CM7_CPUID)
 629:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 630:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE();
 631:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 632:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 633:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 634:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __SEV();
 635:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE();
 636:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 637:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 638:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __WFE();
 524              		.loc 1 638 3
 525              		.syntax unified
 526              	@ 638 "./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 527 0004 20BF     		wfe
 528              	@ 0 "" 2
 639:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 640:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 641:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 529              		.loc 1 641 1
 530              		.thumb
 531              		.syntax unified
 532 0006 00BF     		nop
 533 0008 BD46     		mov	sp, r7
 534              		.cfi_def_cfa_register 13
 535              		@ sp needed
 536 000a 5DF8047B 		ldr	r7, [sp], #4
 537              		.cfi_restore 7
 538              		.cfi_def_cfa_offset 0
 539 000e 7047     		bx	lr
 540              		.cfi_endproc
 541              	.LFE141:
 543              		.section	.text.HAL_PWREx_EnterSTANDBYMode,"ax",%progbits
 544              		.align	1
 545              		.global	HAL_PWREx_EnterSTANDBYMode
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu fpv5-d16
 551              	HAL_PWREx_EnterSTANDBYMode:
 552              	.LFB142:
 642:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccutzvPw.s 			page 35


 643:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 644:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enter a Domain to DSTANDBY mode.
 645:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The DStandby mode is entered when all PDDS_Dn bits in PWR_CPUCR for the Dn domain
 646:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         select Standby mode. When the system enters Standby mode, the voltage regulator
 647:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         is disabled.
 648:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When D2 or D3 domain is in DStandby mode and the CPU sets the domain PDDS_Dn
 649:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         bit to select Stop mode, the domain remains in DStandby mode. The domain will only
 650:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         exit DStandby when the CPU allocates a peripheral in the domain.
 651:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3 domain enters Standby mode only when the D1 and D2 domain are in
 652:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         DStandby.
 653:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTANDBY mode it is recommended to call SCB_CleanDCache function
 654:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in order to clean the D-Cache and guarantee the data integrity for the SRAM memories.
 655:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain: Specifies the Domain to enter to STANDBY mode.
 656:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 657:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN: Enter D1 Domain to DSTANDBY mode.
 658:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
 659:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN: Enter D3 Domain to DSTANDBY mode.
 660:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 661:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 662:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTANDBYMode(uint32_t Domain)
 663:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 553              		.loc 1 663 1
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 8
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 558 0000 80B4     		push	{r7}
 559              		.cfi_def_cfa_offset 4
 560              		.cfi_offset 7, -4
 561 0002 83B0     		sub	sp, sp, #12
 562              		.cfi_def_cfa_offset 16
 563 0004 00AF     		add	r7, sp, #0
 564              		.cfi_def_cfa_register 7
 565 0006 7860     		str	r0, [r7, #4]
 664:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 665:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_DOMAIN(Domain));
 666:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 667:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 668:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 566              		.loc 1 668 6
 567 0008 7B68     		ldr	r3, [r7, #4]
 568 000a 002B     		cmp	r3, #0
 569 000c 0DD1     		bne	.L41
 669:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 670:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check Core */
 671:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     assert_param(IS_PWR_D1_CPU(HAL_GetCurrentCPUID()));
 672:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 673:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1 domain enters Deepsleep */
 674:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
 570              		.loc 1 674 5
 571 000e 124B     		ldr	r3, .L45
 572 0010 1B69     		ldr	r3, [r3, #16]
 573 0012 114A     		ldr	r2, .L45
 574 0014 43F00103 		orr	r3, r3, #1
 575 0018 1361     		str	r3, [r2, #16]
 675:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 676:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
ARM GAS  /tmp/ccutzvPw.s 			page 36


 677:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
 678:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 679:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 680:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 681:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 576              		.loc 1 681 14
 577 001a 104B     		ldr	r3, .L45+4
 578 001c 1B69     		ldr	r3, [r3, #16]
 579 001e 0F4A     		ldr	r2, .L45+4
 580 0020 43F00403 		orr	r3, r3, #4
 581 0024 1361     		str	r3, [r2, #16]
 682:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 683:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
 684:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined ( __CC_ARM)
 685:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores();
 686:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif
 687:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 688:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 689:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI();
 582              		.loc 1 689 5
 583              		.syntax unified
 584              	@ 689 "./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 585 0026 30BF     		wfi
 586              	@ 0 "" 2
 690:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 691:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 692:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 693:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
 694:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
 695:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 696:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 697:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check Core */
 698:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     assert_param(IS_PWR_D2_CPU(HAL_GetCurrentCPUID()));
 699:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 700:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR-> CPU2CR, PWR_CPU2CR_PDDS_D2);
 701:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 702:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 703:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 704:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 705:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
 706:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined ( __CC_ARM)
 707:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores();
 708:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif
 709:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 710:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 711:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI();
 712:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 713:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 714:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 715:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 716:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3 domain enters Deepsleep */
 717:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR-> CPUCR, PWR_CPUCR_PDDS_D3);
 718:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 719:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 720:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR-> CPU2CR, PWR_CPU2CR_PDDS_D3);
 721:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 722:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccutzvPw.s 			page 37


 723:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 587              		.loc 1 723 1
 588              		.thumb
 589              		.syntax unified
 590 0028 0FE0     		b	.L44
 591              	.L41:
 691:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 592              		.loc 1 691 11
 593 002a 7B68     		ldr	r3, [r7, #4]
 594 002c 012B     		cmp	r3, #1
 595 002e 06D1     		bne	.L43
 694:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 596              		.loc 1 694 5
 597 0030 094B     		ldr	r3, .L45
 598 0032 1B69     		ldr	r3, [r3, #16]
 599 0034 084A     		ldr	r2, .L45
 600 0036 43F00203 		orr	r3, r3, #2
 601 003a 1361     		str	r3, [r2, #16]
 602              		.loc 1 723 1
 603 003c 05E0     		b	.L44
 604              	.L43:
 717:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 605              		.loc 1 717 5
 606 003e 064B     		ldr	r3, .L45
 607 0040 1B69     		ldr	r3, [r3, #16]
 608 0042 054A     		ldr	r2, .L45
 609 0044 43F00403 		orr	r3, r3, #4
 610 0048 1361     		str	r3, [r2, #16]
 611              	.L44:
 612              		.loc 1 723 1
 613 004a 00BF     		nop
 614 004c 0C37     		adds	r7, r7, #12
 615              		.cfi_def_cfa_offset 4
 616 004e BD46     		mov	sp, r7
 617              		.cfi_def_cfa_register 13
 618              		@ sp needed
 619 0050 5DF8047B 		ldr	r7, [sp], #4
 620              		.cfi_restore 7
 621              		.cfi_def_cfa_offset 0
 622 0054 7047     		bx	lr
 623              	.L46:
 624 0056 00BF     		.align	2
 625              	.L45:
 626 0058 00480258 		.word	1476544512
 627 005c 00ED00E0 		.word	-536810240
 628              		.cfi_endproc
 629              	.LFE142:
 631              		.section	.text.HAL_PWREx_ConfigD3Domain,"ax",%progbits
 632              		.align	1
 633              		.global	HAL_PWREx_ConfigD3Domain
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv5-d16
 639              	HAL_PWREx_ConfigD3Domain:
 640              	.LFB143:
 724:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccutzvPw.s 			page 38


 725:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 726:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the D3 Domain state when the CPU is in low power mode.
 727:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  D3State: Specifies the D3 state.
 728:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 729:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_STOP: D3 domain will follow the CPU sub-system mode.
 730:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_RUN : D3 domain will stay in RUN mode regardless of the
 731:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     CPU sub-system mode.
 732:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 733:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 734:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigD3Domain(uint32_t D3State)
 735:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 641              		.loc 1 735 1
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 8
 644              		@ frame_needed = 1, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646 0000 80B4     		push	{r7}
 647              		.cfi_def_cfa_offset 4
 648              		.cfi_offset 7, -4
 649 0002 83B0     		sub	sp, sp, #12
 650              		.cfi_def_cfa_offset 16
 651 0004 00AF     		add	r7, sp, #0
 652              		.cfi_def_cfa_register 7
 653 0006 7860     		str	r0, [r7, #4]
 736:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 737:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_D3_STATE(D3State));
 738:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 739:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep D3 in run mode */
 740:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
 654              		.loc 1 740 3
 655 0008 064B     		ldr	r3, .L48
 656 000a 1B69     		ldr	r3, [r3, #16]
 657 000c 23F40062 		bic	r2, r3, #2048
 658 0010 0449     		ldr	r1, .L48
 659 0012 7B68     		ldr	r3, [r7, #4]
 660 0014 1343     		orrs	r3, r3, r2
 661 0016 0B61     		str	r3, [r1, #16]
 741:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 742:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CPU2CR, PWR_CPU2CR_RUN_D3, D3State);
 743:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 744:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 662              		.loc 1 744 1
 663 0018 00BF     		nop
 664 001a 0C37     		adds	r7, r7, #12
 665              		.cfi_def_cfa_offset 4
 666 001c BD46     		mov	sp, r7
 667              		.cfi_def_cfa_register 13
 668              		@ sp needed
 669 001e 5DF8047B 		ldr	r7, [sp], #4
 670              		.cfi_restore 7
 671              		.cfi_def_cfa_offset 0
 672 0022 7047     		bx	lr
 673              	.L49:
 674              		.align	2
 675              	.L48:
 676 0024 00480258 		.word	1476544512
 677              		.cfi_endproc
ARM GAS  /tmp/ccutzvPw.s 			page 39


 678              	.LFE143:
 680              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 681              		.align	1
 682              		.global	HAL_PWREx_EnableFlashPowerDown
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu fpv5-d16
 688              	HAL_PWREx_EnableFlashPowerDown:
 689              	.LFB144:
 745:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 746:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 747:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 748:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Clear HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2 flags for a given domain.
 749:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  DomainFlags: Specifies the Domain flags to be cleared.
 750:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 751:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN_FLAGS: Clear D1 Domain flags.
 752:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN_FLAGS: Clear D2 Domain flags.
 753:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 754:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 755:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearDomainFlags(uint32_t DomainFlags)
 756:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 757:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 758:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_DOMAIN_FLAG(DomainFlags));
 759:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 760:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (DomainFlags == PWR_D1_DOMAIN_FLAGS)
 761:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 762:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
 763:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->CPUCR, PWR_CPUCR_CSSF);
 764:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 765:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 766:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 767:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
 768:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->CPU2CR, PWR_CPU2CR_CSSF);
 769:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 770:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 771:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 772:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 773:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 774:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 775:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Hold the CPU and their allocated peripherals when exiting from STOP mode.
 776:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU: Specifies the core to be held.
 777:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *              This parameter can be one of the following values:
 778:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU1: Hold CPU1 and set CPU2 as master.
 779:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU2: Hold CPU2 and set CPU1 as master.
 780:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
 781:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 782:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_HoldCore(uint32_t CPU)
 783:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 784:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 785:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 786:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 787:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_CORE(CPU));
 788:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 789:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (PWR_CORE_CPU2 == CPU)
 790:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 791:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU1 is not held */
ARM GAS  /tmp/ccutzvPw.s 			page 40


 792:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if(PWR_CPU2CR_HOLD1 != (PWR->CPU2CR & PWR_CPU2CR_HOLD1))
 793:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 794:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD2 bit */
 795:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT(PWR->CPUCR, PWR_CPUCR_HOLD2);
 796:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 797:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 798:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 799:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 800:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 801:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 802:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (PWR_CORE_CPU1 == CPU)
 803:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 804:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU2 is not held */
 805:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if(PWR_CPUCR_HOLD2 != (PWR->CPUCR & PWR_CPUCR_HOLD2))
 806:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 807:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD1 bit */
 808:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT(PWR->CPU2CR, PWR_CPU2CR_HOLD1);
 809:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 810:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 811:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 812:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 813:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 814:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 815:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 816:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 817:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     status = HAL_ERROR;
 818:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 819:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 820:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return status;
 821:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 822:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 823:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 824:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 825:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
 826:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 827:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief   Release the CPU and their allocated peripherals after a wake-up from STOP mode.
 828:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU: Specifies the core to be released.
 829:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 830:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU1: Release the CPU1 and their allocated peripherals from holding.
 831:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU2: Release the CPU2 and their allocated peripherals from holding.
 832:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 833:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 834:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ReleaseCore(uint32_t CPU)
 835:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 836:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 837:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_CORE(CPU));
 838:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 839:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (PWR_CORE_CPU2 == CPU)
 840:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 841:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD2 bit */
 842:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_HOLD2);
 843:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 844:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 845:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 846:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD1 bit */
 847:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_HOLD1);
 848:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccutzvPw.s 			page 41


 849:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 850:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
 851:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 852:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 853:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the Flash Power Down in Stop mode.
 854:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 855:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 856:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown(void)
 857:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 690              		.loc 1 857 1
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695 0000 80B4     		push	{r7}
 696              		.cfi_def_cfa_offset 4
 697              		.cfi_offset 7, -4
 698 0002 00AF     		add	r7, sp, #0
 699              		.cfi_def_cfa_register 7
 858:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Flash Power Down */
 859:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR1, PWR_CR1_FLPS);
 700              		.loc 1 859 3
 701 0004 054B     		ldr	r3, .L51
 702 0006 1B68     		ldr	r3, [r3]
 703 0008 044A     		ldr	r2, .L51
 704 000a 43F40073 		orr	r3, r3, #512
 705 000e 1360     		str	r3, [r2]
 860:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 706              		.loc 1 860 1
 707 0010 00BF     		nop
 708 0012 BD46     		mov	sp, r7
 709              		.cfi_def_cfa_register 13
 710              		@ sp needed
 711 0014 5DF8047B 		ldr	r7, [sp], #4
 712              		.cfi_restore 7
 713              		.cfi_def_cfa_offset 0
 714 0018 7047     		bx	lr
 715              	.L52:
 716 001a 00BF     		.align	2
 717              	.L51:
 718 001c 00480258 		.word	1476544512
 719              		.cfi_endproc
 720              	.LFE144:
 722              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 723              		.align	1
 724              		.global	HAL_PWREx_DisableFlashPowerDown
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv5-d16
 730              	HAL_PWREx_DisableFlashPowerDown:
 731              	.LFB145:
 861:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 862:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 863:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Disable the Flash Power Down in Stop mode.
 864:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 865:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/ccutzvPw.s 			page 42


 866:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown(void)
 867:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 732              		.loc 1 867 1
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737 0000 80B4     		push	{r7}
 738              		.cfi_def_cfa_offset 4
 739              		.cfi_offset 7, -4
 740 0002 00AF     		add	r7, sp, #0
 741              		.cfi_def_cfa_register 7
 868:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Flash Power Down */
 869:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_FLPS);
 742              		.loc 1 869 3
 743 0004 054B     		ldr	r3, .L54
 744 0006 1B68     		ldr	r3, [r3]
 745 0008 044A     		ldr	r2, .L54
 746 000a 23F40073 		bic	r3, r3, #512
 747 000e 1360     		str	r3, [r2]
 870:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 748              		.loc 1 870 1
 749 0010 00BF     		nop
 750 0012 BD46     		mov	sp, r7
 751              		.cfi_def_cfa_register 13
 752              		@ sp needed
 753 0014 5DF8047B 		ldr	r7, [sp], #4
 754              		.cfi_restore 7
 755              		.cfi_def_cfa_offset 0
 756 0018 7047     		bx	lr
 757              	.L55:
 758 001a 00BF     		.align	2
 759              	.L54:
 760 001c 00480258 		.word	1476544512
 761              		.cfi_endproc
 762              	.LFE145:
 764              		.section	.text.HAL_PWREx_EnableWakeUpPin,"ax",%progbits
 765              		.align	1
 766              		.global	HAL_PWREx_EnableWakeUpPin
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu fpv5-d16
 772              	HAL_PWREx_EnableWakeUpPin:
 773              	.LFB146:
 871:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 872:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 873:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the Wake-up PINx functionality.
 874:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sPinParams: pointer to an PWREx_WakeupPinTypeDef structure that contains
 875:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     the configuration informations for the wake-up Pin.
 876:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 877:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 878:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableWakeUpPin(PWREx_WakeupPinTypeDef *sPinParams)
 879:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 774              		.loc 1 879 1
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 56
ARM GAS  /tmp/ccutzvPw.s 			page 43


 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779 0000 80B4     		push	{r7}
 780              		.cfi_def_cfa_offset 4
 781              		.cfi_offset 7, -4
 782 0002 8FB0     		sub	sp, sp, #60
 783              		.cfi_def_cfa_offset 64
 784 0004 00AF     		add	r7, sp, #0
 785              		.cfi_def_cfa_register 7
 786 0006 7860     		str	r0, [r7, #4]
 880:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t pinConfig;
 881:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regMask;
 882:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
 787              		.loc 1 882 18
 788 0008 4FF44033 		mov	r3, #196608
 789 000c 7B63     		str	r3, [r7, #52]
 883:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 884:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 885:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_PIN(sPinParams->WakeUpPin));
 886:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_PIN_POLARITY(sPinParams->PinPolarity));
 887:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_PIN_PULL(sPinParams->PinPull));
 888:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 889:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   pinConfig = sPinParams->WakeUpPin | \
 790              		.loc 1 889 25
 791 000e 7B68     		ldr	r3, [r7, #4]
 792 0010 1A68     		ldr	r2, [r3]
 890:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 793              		.loc 1 890 26
 794 0012 7B68     		ldr	r3, [r7, #4]
 795 0014 5968     		ldr	r1, [r3, #4]
 796              		.loc 1 890 45
 797 0016 7B68     		ldr	r3, [r7, #4]
 798 0018 1B68     		ldr	r3, [r3]
 799 001a 3B61     		str	r3, [r7, #16]
 800              	.LBB18:
 801              	.LBB19:
 754:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 756:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 758:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 759:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 760:./Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 761:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 763:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 765:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 766:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 767:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 768:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 769:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 770:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 771:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 772:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 773:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 774:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
ARM GAS  /tmp/ccutzvPw.s 			page 44


 775:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 776:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 777:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 778:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 779:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 780:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 782:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 783:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 789:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 790:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 791:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 792:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 793:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 794:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 795:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 796:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 797:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 798:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 799:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 800:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 802:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 803:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 804:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 805:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 806:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 807:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 808:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 809:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 810:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 811:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 812:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 813:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 814:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 815:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 816:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 817:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 818:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 819:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 820:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 821:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 822:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 823:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 824:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 825:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 826:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 827:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 828:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 829:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 830:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 831:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccutzvPw.s 			page 45


 832:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 833:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 834:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 835:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 836:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 837:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 838:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 839:./Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 840:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 841:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 842:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 843:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 845:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 846:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 847:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 848:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 849:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 851:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 852:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 853:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 855:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 856:./Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 857:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802              		.loc 2 857 4
 803 001c 3B69     		ldr	r3, [r7, #16]
 804              		.syntax unified
 805              	@ 857 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 806 001e 93FAA3F3 		rbit r3, r3
 807              	@ 0 "" 2
 808              		.thumb
 809              		.syntax unified
 810 0022 FB60     		str	r3, [r7, #12]
 858:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 859:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
 860:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 861:./Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 862:./Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 863:./Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 864:./Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 865:./Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 866:./Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 867:./Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 868:./Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 869:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 870:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 811              		.loc 2 870 9
 812 0024 FB68     		ldr	r3, [r7, #12]
 813              	.LBE19:
 814              	.LBE18:
 815              		.loc 1 890 45
 816 0026 B3FA83F3 		clz	r3, r3
 817              		.loc 1 890 81
 818 002a 0833     		adds	r3, r3, #8
 819              		.loc 1 890 107
ARM GAS  /tmp/ccutzvPw.s 			page 46


 820 002c 03F01F03 		and	r3, r3, #31
 821              		.loc 1 890 40
 822 0030 01FA03F3 		lsl	r3, r1, r3
 889:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 823              		.loc 1 889 37
 824 0034 1A43     		orrs	r2, r2, r3
 891:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL
 825              		.loc 1 891 26
 826 0036 7B68     		ldr	r3, [r7, #4]
 827 0038 9968     		ldr	r1, [r3, #8]
 828              		.loc 1 891 42
 829 003a 7B68     		ldr	r3, [r7, #4]
 830 003c 1B68     		ldr	r3, [r3]
 831 003e BB61     		str	r3, [r7, #24]
 832              	.LBB20:
 833              	.LBB21:
 857:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 834              		.loc 2 857 4
 835 0040 BB69     		ldr	r3, [r7, #24]
 836              		.syntax unified
 837              	@ 857 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 838 0042 93FAA3F3 		rbit r3, r3
 839              	@ 0 "" 2
 840              		.thumb
 841              		.syntax unified
 842 0046 7B61     		str	r3, [r7, #20]
 843              		.loc 2 870 9
 844 0048 7B69     		ldr	r3, [r7, #20]
 845              	.LBE21:
 846              	.LBE20:
 847              		.loc 1 891 42
 848 004a B3FA83F3 		clz	r3, r3
 849              		.loc 1 891 115
 850 004e 0833     		adds	r3, r3, #8
 851 0050 5B00     		lsls	r3, r3, #1
 852              		.loc 1 891 144
 853 0052 03F01E03 		and	r3, r3, #30
 854              		.loc 1 891 36
 855 0056 01FA03F3 		lsl	r3, r1, r3
 889:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 856              		.loc 1 889 13
 857 005a 1343     		orrs	r3, r3, r2
 858 005c 3B63     		str	r3, [r7, #48]
 892:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 893:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regMask   = sPinParams->WakeUpPin | \
 859              		.loc 1 893 25
 860 005e 7B68     		ldr	r3, [r7, #4]
 861 0060 1A68     		ldr	r2, [r3]
 894:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 862              		.loc 1 894 39
 863 0062 7B68     		ldr	r3, [r7, #4]
 864 0064 1B68     		ldr	r3, [r3]
 865 0066 3B62     		str	r3, [r7, #32]
 866              	.LBB22:
 867              	.LBB23:
 857:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 868              		.loc 2 857 4
ARM GAS  /tmp/ccutzvPw.s 			page 47


 869 0068 3B6A     		ldr	r3, [r7, #32]
 870              		.syntax unified
 871              	@ 857 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 872 006a 93FAA3F3 		rbit r3, r3
 873              	@ 0 "" 2
 874              		.thumb
 875              		.syntax unified
 876 006e FB61     		str	r3, [r7, #28]
 877              		.loc 2 870 9
 878 0070 FB69     		ldr	r3, [r7, #28]
 879              	.LBE23:
 880              	.LBE22:
 881              		.loc 1 894 39
 882 0072 B3FA83F3 		clz	r3, r3
 883              		.loc 1 894 75
 884 0076 03F01F03 		and	r3, r3, #31
 885              		.loc 1 894 35
 886 007a 4FF48071 		mov	r1, #256
 887 007e 01FA03F3 		lsl	r3, r1, r3
 893:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 888              		.loc 1 893 37
 889 0082 1A43     		orrs	r2, r2, r3
 895:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSE
 890              		.loc 1 895 30
 891 0084 7B68     		ldr	r3, [r7, #4]
 892 0086 1B68     		ldr	r3, [r3]
 893 0088 BB62     		str	r3, [r7, #40]
 894              	.LBB24:
 895              	.LBB25:
 857:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 896              		.loc 2 857 4
 897 008a BB6A     		ldr	r3, [r7, #40]
 898              		.syntax unified
 899              	@ 857 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 900 008c 93FAA3F3 		rbit r3, r3
 901              	@ 0 "" 2
 902              		.thumb
 903              		.syntax unified
 904 0090 7B62     		str	r3, [r7, #36]
 905              		.loc 2 870 9
 906 0092 7B6A     		ldr	r3, [r7, #36]
 907              	.LBE25:
 908              	.LBE24:
 909              		.loc 1 895 30
 910 0094 B3FA83F3 		clz	r3, r3
 911              		.loc 1 895 66
 912 0098 5B00     		lsls	r3, r3, #1
 913              		.loc 1 895 103
 914 009a 03F01E03 		and	r3, r3, #30
 915              		.loc 1 895 25
 916 009e 796B     		ldr	r1, [r7, #52]
 917 00a0 01FA03F3 		lsl	r3, r1, r3
 893:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 918              		.loc 1 893 13
 919 00a4 1343     		orrs	r3, r3, r2
 920 00a6 FB62     		str	r3, [r7, #44]
 896:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccutzvPw.s 			page 48


 897:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable and Specify the Wake-Up pin polarity and the pull configuration
 898:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      for the event detection (rising or falling edge) */
 899:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->WKUPEPR, regMask, pinConfig);
 921              		.loc 1 899 3
 922 00a8 0E4B     		ldr	r3, .L61
 923 00aa 9A6A     		ldr	r2, [r3, #40]
 924 00ac FB6A     		ldr	r3, [r7, #44]
 925 00ae DB43     		mvns	r3, r3
 926 00b0 1A40     		ands	r2, r2, r3
 927 00b2 0C49     		ldr	r1, .L61
 928 00b4 3B6B     		ldr	r3, [r7, #48]
 929 00b6 1343     		orrs	r3, r3, r2
 930 00b8 8B62     		str	r3, [r1, #40]
 900:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifndef DUAL_CORE
 901:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the Wakeup Pin EXTI Line */
 902:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
 931              		.loc 1 902 3
 932 00ba 4FF0B043 		mov	r3, #1476395008
 933 00be D3F89030 		ldr	r3, [r3, #144]
 934 00c2 23F0FC52 		bic	r2, r3, #528482304
 935 00c6 7B68     		ldr	r3, [r7, #4]
 936 00c8 1B68     		ldr	r3, [r3]
 937 00ca DB05     		lsls	r3, r3, #23
 938 00cc 4FF0B041 		mov	r1, #1476395008
 939 00d0 1343     		orrs	r3, r3, r2
 940 00d2 C1F89030 		str	r3, [r1, #144]
 903:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif
 904:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 941              		.loc 1 904 1
 942 00d6 00BF     		nop
 943 00d8 3C37     		adds	r7, r7, #60
 944              		.cfi_def_cfa_offset 4
 945 00da BD46     		mov	sp, r7
 946              		.cfi_def_cfa_register 13
 947              		@ sp needed
 948 00dc 5DF8047B 		ldr	r7, [sp], #4
 949              		.cfi_restore 7
 950              		.cfi_def_cfa_offset 0
 951 00e0 7047     		bx	lr
 952              	.L62:
 953 00e2 00BF     		.align	2
 954              	.L61:
 955 00e4 00480258 		.word	1476544512
 956              		.cfi_endproc
 957              	.LFE146:
 959              		.section	.text.HAL_PWREx_DisableWakeUpPin,"ax",%progbits
 960              		.align	1
 961              		.global	HAL_PWREx_DisableWakeUpPin
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 965              		.fpu fpv5-d16
 967              	HAL_PWREx_DisableWakeUpPin:
 968              	.LFB147:
 905:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 906:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 907:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Wake-up PINx functionality.
ARM GAS  /tmp/ccutzvPw.s 			page 49


 908:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param WakeUpPin: Specifies the Wake-Up pin to be disabled.
 909:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 910:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN1: Disable PA0  wake-up PIN.
 911:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN2: Disable PA2  wake-up PIN..
 912:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN3: Disable PI8  wake-up PIN..
 913:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN4: Disable PC13 wake-up PIN..
 914:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN5: Disable PI11 wake-up PIN..
 915:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN6: Disable PC1  wake-up PIN..
 916:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 917:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 918:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableWakeUpPin(uint32_t WakeUpPin)
 919:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 969              		.loc 1 919 1
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 8
 972              		@ frame_needed = 1, uses_anonymous_args = 0
 973              		@ link register save eliminated.
 974 0000 80B4     		push	{r7}
 975              		.cfi_def_cfa_offset 4
 976              		.cfi_offset 7, -4
 977 0002 83B0     		sub	sp, sp, #12
 978              		.cfi_def_cfa_offset 16
 979 0004 00AF     		add	r7, sp, #0
 980              		.cfi_def_cfa_register 7
 981 0006 7860     		str	r0, [r7, #4]
 920:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 921:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));
 922:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 923:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the WakeUpPin */
 924:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->WKUPEPR, WakeUpPin);
 982              		.loc 1 924 3
 983 0008 064B     		ldr	r3, .L64
 984 000a 9A6A     		ldr	r2, [r3, #40]
 985 000c 7B68     		ldr	r3, [r7, #4]
 986 000e DB43     		mvns	r3, r3
 987 0010 0449     		ldr	r1, .L64
 988 0012 1340     		ands	r3, r3, r2
 989 0014 8B62     		str	r3, [r1, #40]
 925:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 990              		.loc 1 925 1
 991 0016 00BF     		nop
 992 0018 0C37     		adds	r7, r7, #12
 993              		.cfi_def_cfa_offset 4
 994 001a BD46     		mov	sp, r7
 995              		.cfi_def_cfa_register 13
 996              		@ sp needed
 997 001c 5DF8047B 		ldr	r7, [sp], #4
 998              		.cfi_restore 7
 999              		.cfi_def_cfa_offset 0
 1000 0020 7047     		bx	lr
 1001              	.L65:
 1002 0022 00BF     		.align	2
 1003              	.L64:
 1004 0024 00480258 		.word	1476544512
 1005              		.cfi_endproc
 1006              	.LFE147:
 1008              		.section	.text.HAL_PWREx_GetWakeupFlag,"ax",%progbits
ARM GAS  /tmp/ccutzvPw.s 			page 50


 1009              		.align	1
 1010              		.global	HAL_PWREx_GetWakeupFlag
 1011              		.syntax unified
 1012              		.thumb
 1013              		.thumb_func
 1014              		.fpu fpv5-d16
 1016              	HAL_PWREx_GetWakeupFlag:
 1017              	.LFB148:
 926:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 927:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 928:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Get the Wake-Up Pin flag.
 929:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to check.
 930:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 931:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1: A wakeup event was received from PA0.
 932:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2: A wakeup event was received from PA2.
 933:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3: A wakeup event was received from PC1.
 934:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4: A wakeup event was received from PC13.
 935:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5: A wakeup event was received from PI8.
 936:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6: A wakeup event was received from PI11.
 937:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The Wake-Up pin flag.
 938:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 939:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t  HAL_PWREx_GetWakeupFlag(uint32_t WakeUpFlag)
 940:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1018              		.loc 1 940 1
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 8
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023 0000 80B4     		push	{r7}
 1024              		.cfi_def_cfa_offset 4
 1025              		.cfi_offset 7, -4
 1026 0002 83B0     		sub	sp, sp, #12
 1027              		.cfi_def_cfa_offset 16
 1028 0004 00AF     		add	r7, sp, #0
 1029              		.cfi_def_cfa_register 7
 1030 0006 7860     		str	r0, [r7, #4]
 941:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 942:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_FLAG(WakeUpFlag));
 943:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 944:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->WKUPFR & WakeUpFlag);
 1031              		.loc 1 944 14
 1032 0008 044B     		ldr	r3, .L68
 1033 000a 5A6A     		ldr	r2, [r3, #36]
 1034              		.loc 1 944 23
 1035 000c 7B68     		ldr	r3, [r7, #4]
 1036 000e 1340     		ands	r3, r3, r2
 945:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1037              		.loc 1 945 1
 1038 0010 1846     		mov	r0, r3
 1039 0012 0C37     		adds	r7, r7, #12
 1040              		.cfi_def_cfa_offset 4
 1041 0014 BD46     		mov	sp, r7
 1042              		.cfi_def_cfa_register 13
 1043              		@ sp needed
 1044 0016 5DF8047B 		ldr	r7, [sp], #4
 1045              		.cfi_restore 7
 1046              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccutzvPw.s 			page 51


 1047 001a 7047     		bx	lr
 1048              	.L69:
 1049              		.align	2
 1050              	.L68:
 1051 001c 00480258 		.word	1476544512
 1052              		.cfi_endproc
 1053              	.LFE148:
 1055              		.section	.text.HAL_PWREx_ClearWakeupFlag,"ax",%progbits
 1056              		.align	1
 1057              		.global	HAL_PWREx_ClearWakeupFlag
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu fpv5-d16
 1063              	HAL_PWREx_ClearWakeupFlag:
 1064              	.LFB149:
 946:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 947:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 948:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Clear the Wake-Up pin flag.
 949:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
 950:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 951:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1: Clear the wakeup event received from PA0.
 952:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2: Clear the wakeup event received from PA2.
 953:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3: Clear the wakeup event received from PC1.
 954:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4: Clear the wakeup event received from PC13.
 955:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5: Clear the wakeup event received from PI8.
 956:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6: Clear the wakeup event received from PI11.
 957:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 958:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 959:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag(uint32_t WakeUpFlag)
 960:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1065              		.loc 1 960 1
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 8
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070 0000 80B4     		push	{r7}
 1071              		.cfi_def_cfa_offset 4
 1072              		.cfi_offset 7, -4
 1073 0002 83B0     		sub	sp, sp, #12
 1074              		.cfi_def_cfa_offset 16
 1075 0004 00AF     		add	r7, sp, #0
 1076              		.cfi_def_cfa_register 7
 1077 0006 7860     		str	r0, [r7, #4]
 961:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 962:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_FLAG(WakeUpFlag));
 963:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 964:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->WKUPCR, WakeUpFlag);
 1078              		.loc 1 964 3
 1079 0008 0A4B     		ldr	r3, .L73
 1080 000a 1A6A     		ldr	r2, [r3, #32]
 1081 000c 0949     		ldr	r1, .L73
 1082 000e 7B68     		ldr	r3, [r7, #4]
 1083 0010 1343     		orrs	r3, r3, r2
 1084 0012 0B62     		str	r3, [r1, #32]
 965:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 966:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if((PWR->WKUPFR & WakeUpFlag) != 0U)
ARM GAS  /tmp/ccutzvPw.s 			page 52


 1085              		.loc 1 966 10
 1086 0014 074B     		ldr	r3, .L73
 1087 0016 5A6A     		ldr	r2, [r3, #36]
 1088              		.loc 1 966 19
 1089 0018 7B68     		ldr	r3, [r7, #4]
 1090 001a 1340     		ands	r3, r3, r2
 1091              		.loc 1 966 5
 1092 001c 002B     		cmp	r3, #0
 1093 001e 01D0     		beq	.L71
 967:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 968:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_ERROR;
 1094              		.loc 1 968 12
 1095 0020 0123     		movs	r3, #1
 1096 0022 00E0     		b	.L72
 1097              	.L71:
 969:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 970:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 971:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1098              		.loc 1 971 10
 1099 0024 0023     		movs	r3, #0
 1100              	.L72:
 972:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1101              		.loc 1 972 1
 1102 0026 1846     		mov	r0, r3
 1103 0028 0C37     		adds	r7, r7, #12
 1104              		.cfi_def_cfa_offset 4
 1105 002a BD46     		mov	sp, r7
 1106              		.cfi_def_cfa_register 13
 1107              		@ sp needed
 1108 002c 5DF8047B 		ldr	r7, [sp], #4
 1109              		.cfi_restore 7
 1110              		.cfi_def_cfa_offset 0
 1111 0030 7047     		bx	lr
 1112              	.L74:
 1113 0032 00BF     		.align	2
 1114              	.L73:
 1115 0034 00480258 		.word	1476544512
 1116              		.cfi_endproc
 1117              	.LFE149:
 1119              		.section	.text.HAL_PWREx_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1120              		.align	1
 1121              		.global	HAL_PWREx_WAKEUP_PIN_IRQHandler
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv5-d16
 1127              	HAL_PWREx_WAKEUP_PIN_IRQHandler:
 1128              	.LFB150:
 973:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 974:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 975:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR WAKEUP PIN interrupt request.
 976:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
 977:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 978:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 979:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_WAKEUP_PIN_IRQHandler(void)
 980:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1129              		.loc 1 980 1
ARM GAS  /tmp/ccutzvPw.s 			page 53


 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133 0000 80B5     		push	{r7, lr}
 1134              		.cfi_def_cfa_offset 8
 1135              		.cfi_offset 7, -8
 1136              		.cfi_offset 14, -4
 1137 0002 00AF     		add	r7, sp, #0
 1138              		.cfi_def_cfa_register 7
 981:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
 982:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
 1139              		.loc 1 982 6
 1140 0004 2A4B     		ldr	r3, .L83
 1141 0006 5B6A     		ldr	r3, [r3, #36]
 1142 0008 03F00103 		and	r3, r3, #1
 1143              		.loc 1 982 5
 1144 000c 002B     		cmp	r3, #0
 1145 000e 08D0     		beq	.L76
 983:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 984:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF1 flag */
 985:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->WKUPCR, PWR_WKUPCR_WKUPC1);
 1146              		.loc 1 985 5
 1147 0010 274B     		ldr	r3, .L83
 1148 0012 1B6A     		ldr	r3, [r3, #32]
 1149 0014 264A     		ldr	r2, .L83
 1150 0016 43F00103 		orr	r3, r3, #1
 1151 001a 1362     		str	r3, [r2, #32]
 986:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 987:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP1 interrupt user callback */
 988:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP1_Callback();
 1152              		.loc 1 988 5
 1153 001c FFF7FEFF 		bl	HAL_PWREx_WKUP1_Callback
 989:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 990:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if(READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
 991:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 992:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF2 flag */
 993:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->WKUPCR, PWR_WKUPCR_WKUPC2);
 994:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 995:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP2 interrupt user callback */
 996:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP2_Callback();
 997:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 998:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if(READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
 999:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1000:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF3 flag */
1001:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->WKUPCR, PWR_WKUPCR_WKUPC3);
1002:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1003:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP3 interrupt user callback */
1004:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP3_Callback();
1005:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1006:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if(READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
1007:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1008:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF4 flag */
1009:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->WKUPCR, PWR_WKUPCR_WKUPC4);
1010:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1011:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP4 interrupt user callback */
1012:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP4_Callback();
1013:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccutzvPw.s 			page 54


1014:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if(READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
1015:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1016:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF5 flag */
1017:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->WKUPCR, PWR_WKUPCR_WKUPC5);
1018:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1019:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP5 interrupt user callback */
1020:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP5_Callback();
1021:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1022:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1023:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1024:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF6 flag */
1025:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT(PWR->WKUPCR, PWR_WKUPCR_WKUPC6);
1026:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1027:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP6 interrupt user callback */
1028:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP6_Callback();
1029:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1030:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1154              		.loc 1 1030 1
 1155 0020 43E0     		b	.L82
 1156              	.L76:
 990:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1157              		.loc 1 990 11
 1158 0022 234B     		ldr	r3, .L83
 1159 0024 5B6A     		ldr	r3, [r3, #36]
 1160 0026 03F00203 		and	r3, r3, #2
 990:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1161              		.loc 1 990 10
 1162 002a 002B     		cmp	r3, #0
 1163 002c 08D0     		beq	.L78
 993:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1164              		.loc 1 993 5
 1165 002e 204B     		ldr	r3, .L83
 1166 0030 1B6A     		ldr	r3, [r3, #32]
 1167 0032 1F4A     		ldr	r2, .L83
 1168 0034 43F00203 		orr	r3, r3, #2
 1169 0038 1362     		str	r3, [r2, #32]
 996:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1170              		.loc 1 996 5
 1171 003a FFF7FEFF 		bl	HAL_PWREx_WKUP2_Callback
 1172              		.loc 1 1030 1
 1173 003e 34E0     		b	.L82
 1174              	.L78:
 998:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1175              		.loc 1 998 11
 1176 0040 1B4B     		ldr	r3, .L83
 1177 0042 5B6A     		ldr	r3, [r3, #36]
 1178 0044 03F00403 		and	r3, r3, #4
 998:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1179              		.loc 1 998 10
 1180 0048 002B     		cmp	r3, #0
 1181 004a 08D0     		beq	.L79
1001:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1182              		.loc 1 1001 5
 1183 004c 184B     		ldr	r3, .L83
 1184 004e 1B6A     		ldr	r3, [r3, #32]
 1185 0050 174A     		ldr	r2, .L83
 1186 0052 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/ccutzvPw.s 			page 55


 1187 0056 1362     		str	r3, [r2, #32]
1004:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1188              		.loc 1 1004 5
 1189 0058 FFF7FEFF 		bl	HAL_PWREx_WKUP3_Callback
 1190              		.loc 1 1030 1
 1191 005c 25E0     		b	.L82
 1192              	.L79:
1006:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1193              		.loc 1 1006 11
 1194 005e 144B     		ldr	r3, .L83
 1195 0060 5B6A     		ldr	r3, [r3, #36]
 1196 0062 03F00803 		and	r3, r3, #8
1006:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1197              		.loc 1 1006 10
 1198 0066 002B     		cmp	r3, #0
 1199 0068 08D0     		beq	.L80
1009:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1200              		.loc 1 1009 5
 1201 006a 114B     		ldr	r3, .L83
 1202 006c 1B6A     		ldr	r3, [r3, #32]
 1203 006e 104A     		ldr	r2, .L83
 1204 0070 43F00803 		orr	r3, r3, #8
 1205 0074 1362     		str	r3, [r2, #32]
1012:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1206              		.loc 1 1012 5
 1207 0076 FFF7FEFF 		bl	HAL_PWREx_WKUP4_Callback
 1208              		.loc 1 1030 1
 1209 007a 16E0     		b	.L82
 1210              	.L80:
1014:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1211              		.loc 1 1014 11
 1212 007c 0C4B     		ldr	r3, .L83
 1213 007e 5B6A     		ldr	r3, [r3, #36]
 1214 0080 03F01003 		and	r3, r3, #16
1014:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1215              		.loc 1 1014 10
 1216 0084 002B     		cmp	r3, #0
 1217 0086 08D0     		beq	.L81
1017:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1218              		.loc 1 1017 5
 1219 0088 094B     		ldr	r3, .L83
 1220 008a 1B6A     		ldr	r3, [r3, #32]
 1221 008c 084A     		ldr	r2, .L83
 1222 008e 43F01003 		orr	r3, r3, #16
 1223 0092 1362     		str	r3, [r2, #32]
1020:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1224              		.loc 1 1020 5
 1225 0094 FFF7FEFF 		bl	HAL_PWREx_WKUP5_Callback
 1226              		.loc 1 1030 1
 1227 0098 07E0     		b	.L82
 1228              	.L81:
1025:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1229              		.loc 1 1025 5
 1230 009a 054B     		ldr	r3, .L83
 1231 009c 1B6A     		ldr	r3, [r3, #32]
 1232 009e 044A     		ldr	r2, .L83
 1233 00a0 43F02003 		orr	r3, r3, #32
ARM GAS  /tmp/ccutzvPw.s 			page 56


 1234 00a4 1362     		str	r3, [r2, #32]
1028:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1235              		.loc 1 1028 5
 1236 00a6 FFF7FEFF 		bl	HAL_PWREx_WKUP6_Callback
 1237              	.L82:
 1238              		.loc 1 1030 1
 1239 00aa 00BF     		nop
 1240 00ac 80BD     		pop	{r7, pc}
 1241              	.L84:
 1242 00ae 00BF     		.align	2
 1243              	.L83:
 1244 00b0 00480258 		.word	1476544512
 1245              		.cfi_endproc
 1246              	.LFE150:
 1248              		.section	.text.HAL_PWREx_WKUP1_Callback,"ax",%progbits
 1249              		.align	1
 1250              		.weak	HAL_PWREx_WKUP1_Callback
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1254              		.fpu fpv5-d16
 1256              	HAL_PWREx_WKUP1_Callback:
 1257              	.LFB151:
1031:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1032:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1033:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  PWR WKUP1 interrupt callback
1034:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1035:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1036:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP1_Callback(void)
1037:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1258              		.loc 1 1037 1
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
 1263 0000 80B4     		push	{r7}
 1264              		.cfi_def_cfa_offset 4
 1265              		.cfi_offset 7, -4
 1266 0002 00AF     		add	r7, sp, #0
 1267              		.cfi_def_cfa_register 7
1038:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1039:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP1Callback could be implemented in the user file
1040:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1041:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1268              		.loc 1 1041 1
 1269 0004 00BF     		nop
 1270 0006 BD46     		mov	sp, r7
 1271              		.cfi_def_cfa_register 13
 1272              		@ sp needed
 1273 0008 5DF8047B 		ldr	r7, [sp], #4
 1274              		.cfi_restore 7
 1275              		.cfi_def_cfa_offset 0
 1276 000c 7047     		bx	lr
 1277              		.cfi_endproc
 1278              	.LFE151:
 1280              		.section	.text.HAL_PWREx_WKUP2_Callback,"ax",%progbits
 1281              		.align	1
ARM GAS  /tmp/ccutzvPw.s 			page 57


 1282              		.weak	HAL_PWREx_WKUP2_Callback
 1283              		.syntax unified
 1284              		.thumb
 1285              		.thumb_func
 1286              		.fpu fpv5-d16
 1288              	HAL_PWREx_WKUP2_Callback:
 1289              	.LFB152:
1042:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1043:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1044:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  PWR WKUP2 interrupt callback
1045:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1046:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1047:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP2_Callback(void)
1048:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1290              		.loc 1 1048 1
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294              		@ link register save eliminated.
 1295 0000 80B4     		push	{r7}
 1296              		.cfi_def_cfa_offset 4
 1297              		.cfi_offset 7, -4
 1298 0002 00AF     		add	r7, sp, #0
 1299              		.cfi_def_cfa_register 7
1049:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1050:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP2Callback could be implemented in the user file
1051:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1052:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1300              		.loc 1 1052 1
 1301 0004 00BF     		nop
 1302 0006 BD46     		mov	sp, r7
 1303              		.cfi_def_cfa_register 13
 1304              		@ sp needed
 1305 0008 5DF8047B 		ldr	r7, [sp], #4
 1306              		.cfi_restore 7
 1307              		.cfi_def_cfa_offset 0
 1308 000c 7047     		bx	lr
 1309              		.cfi_endproc
 1310              	.LFE152:
 1312              		.section	.text.HAL_PWREx_WKUP3_Callback,"ax",%progbits
 1313              		.align	1
 1314              		.weak	HAL_PWREx_WKUP3_Callback
 1315              		.syntax unified
 1316              		.thumb
 1317              		.thumb_func
 1318              		.fpu fpv5-d16
 1320              	HAL_PWREx_WKUP3_Callback:
 1321              	.LFB153:
1053:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1054:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1055:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  PWR WKUP3 interrupt callback
1056:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1057:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1058:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP3_Callback(void)
1059:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1322              		.loc 1 1059 1
 1323              		.cfi_startproc
ARM GAS  /tmp/ccutzvPw.s 			page 58


 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326              		@ link register save eliminated.
 1327 0000 80B4     		push	{r7}
 1328              		.cfi_def_cfa_offset 4
 1329              		.cfi_offset 7, -4
 1330 0002 00AF     		add	r7, sp, #0
 1331              		.cfi_def_cfa_register 7
1060:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1061:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP3Callback could be implemented in the user file
1062:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1063:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1332              		.loc 1 1063 1
 1333 0004 00BF     		nop
 1334 0006 BD46     		mov	sp, r7
 1335              		.cfi_def_cfa_register 13
 1336              		@ sp needed
 1337 0008 5DF8047B 		ldr	r7, [sp], #4
 1338              		.cfi_restore 7
 1339              		.cfi_def_cfa_offset 0
 1340 000c 7047     		bx	lr
 1341              		.cfi_endproc
 1342              	.LFE153:
 1344              		.section	.text.HAL_PWREx_WKUP4_Callback,"ax",%progbits
 1345              		.align	1
 1346              		.weak	HAL_PWREx_WKUP4_Callback
 1347              		.syntax unified
 1348              		.thumb
 1349              		.thumb_func
 1350              		.fpu fpv5-d16
 1352              	HAL_PWREx_WKUP4_Callback:
 1353              	.LFB154:
1064:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1065:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1066:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  PWR WKUP4 interrupt callback
1067:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1068:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1069:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP4_Callback(void)
1070:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1354              		.loc 1 1070 1
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 1, uses_anonymous_args = 0
 1358              		@ link register save eliminated.
 1359 0000 80B4     		push	{r7}
 1360              		.cfi_def_cfa_offset 4
 1361              		.cfi_offset 7, -4
 1362 0002 00AF     		add	r7, sp, #0
 1363              		.cfi_def_cfa_register 7
1071:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1072:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP4Callback could be implemented in the user file
1073:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1074:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1364              		.loc 1 1074 1
 1365 0004 00BF     		nop
 1366 0006 BD46     		mov	sp, r7
 1367              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccutzvPw.s 			page 59


 1368              		@ sp needed
 1369 0008 5DF8047B 		ldr	r7, [sp], #4
 1370              		.cfi_restore 7
 1371              		.cfi_def_cfa_offset 0
 1372 000c 7047     		bx	lr
 1373              		.cfi_endproc
 1374              	.LFE154:
 1376              		.section	.text.HAL_PWREx_WKUP5_Callback,"ax",%progbits
 1377              		.align	1
 1378              		.weak	HAL_PWREx_WKUP5_Callback
 1379              		.syntax unified
 1380              		.thumb
 1381              		.thumb_func
 1382              		.fpu fpv5-d16
 1384              	HAL_PWREx_WKUP5_Callback:
 1385              	.LFB155:
1075:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1076:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1077:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  PWR WKUP5 interrupt callback
1078:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1079:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1080:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP5_Callback(void)
1081:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1386              		.loc 1 1081 1
 1387              		.cfi_startproc
 1388              		@ args = 0, pretend = 0, frame = 0
 1389              		@ frame_needed = 1, uses_anonymous_args = 0
 1390              		@ link register save eliminated.
 1391 0000 80B4     		push	{r7}
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 7, -4
 1394 0002 00AF     		add	r7, sp, #0
 1395              		.cfi_def_cfa_register 7
1082:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1083:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP5Callback could be implemented in the user file
1084:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1085:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1396              		.loc 1 1085 1
 1397 0004 00BF     		nop
 1398 0006 BD46     		mov	sp, r7
 1399              		.cfi_def_cfa_register 13
 1400              		@ sp needed
 1401 0008 5DF8047B 		ldr	r7, [sp], #4
 1402              		.cfi_restore 7
 1403              		.cfi_def_cfa_offset 0
 1404 000c 7047     		bx	lr
 1405              		.cfi_endproc
 1406              	.LFE155:
 1408              		.section	.text.HAL_PWREx_WKUP6_Callback,"ax",%progbits
 1409              		.align	1
 1410              		.weak	HAL_PWREx_WKUP6_Callback
 1411              		.syntax unified
 1412              		.thumb
 1413              		.thumb_func
 1414              		.fpu fpv5-d16
 1416              	HAL_PWREx_WKUP6_Callback:
 1417              	.LFB156:
ARM GAS  /tmp/ccutzvPw.s 			page 60


1086:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1087:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1088:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  PWR WKUP6 interrupt callback
1089:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1090:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1091:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP6_Callback(void)
1092:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1418              		.loc 1 1092 1
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 0
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422              		@ link register save eliminated.
 1423 0000 80B4     		push	{r7}
 1424              		.cfi_def_cfa_offset 4
 1425              		.cfi_offset 7, -4
 1426 0002 00AF     		add	r7, sp, #0
 1427              		.cfi_def_cfa_register 7
1093:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1094:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP6Callback could be implemented in the user file
1095:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1096:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1428              		.loc 1 1096 1
 1429 0004 00BF     		nop
 1430 0006 BD46     		mov	sp, r7
 1431              		.cfi_def_cfa_register 13
 1432              		@ sp needed
 1433 0008 5DF8047B 		ldr	r7, [sp], #4
 1434              		.cfi_restore 7
 1435              		.cfi_def_cfa_offset 0
 1436 000c 7047     		bx	lr
 1437              		.cfi_endproc
 1438              	.LFE156:
 1440              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
 1441              		.align	1
 1442              		.global	HAL_PWREx_EnableBkUpReg
 1443              		.syntax unified
 1444              		.thumb
 1445              		.thumb_func
 1446              		.fpu fpv5-d16
 1448              	HAL_PWREx_EnableBkUpReg:
 1449              	.LFB157:
1097:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1098:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1099:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1100:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1101:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1102:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group3 Peripherals control functions
1103:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Peripherals control functions
1104:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1105:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1106:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1107:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1108:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Peripherals control functions #####
1109:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1110:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1111:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
1112:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ================================================
ARM GAS  /tmp/ccutzvPw.s 			page 61


1113:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1114:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only from
1115:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is
1116:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           retained even in Standby or VBAT mode when the low power backup regulator
1117:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           is enabled. It can be considered as an internal EEPROM when VBAT is
1118:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           always present. You can use the HAL_PWREx_EnableBkUpReg() function to
1119:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           enable the low power backup regulator.
1120:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD)
1121:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to
1122:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           save battery life.
1123:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read
1124:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private
1125:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through
1126:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to
1127:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level 0 is requested.
1128:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash
1129:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           programming manual.
1130:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to have a tradeoff between
1131:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           performance and power consumption when the device does not operate at
1132:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the maximum frequency. This is done through HAL_PWREx_ControlVoltageScaling(VOS)
1133:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function which configure the VOS bit in PWR_D3CR register.
1134:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to operate in Low Power mode
1135:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           when the system enter STOP mode to further reduce power consumption.
1136:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           This is done through HAL_PWREx_ControlStopModeVoltageScaling(SVOS)
1137:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function which configure the SVOS bit in PWR_CR1 register.
1138:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           The selected SVOS4 and SVOS5 levels add an additional startup delay when exiting from
1139:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           system Stop mode.
1140:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     -@- Refer to the product datasheets for more details.
1141:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1142:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** USB Regulator configuration ***
1143:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
1144:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1145:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB transceivers are supplied from a dedicated VDD33USB supply that can be
1146:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           provided either by the integrated USB regulator, or by an external USB supply.
1147:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is enabled by HAL_PWREx_EnableUSBReg() function, the VDD33USB
1148:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           is then provided from the USB regulator.
1149:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the USB regulator is enabled, the VDD33USB supply level detector shall
1150:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           be enabled through  HAL_PWREx_EnableUSBVoltageDetector() function.
1151:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is disabled through HAL_PWREx_DisableUSBReg() function and VDD33USB
1152:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           can be provided from an external supply. In this case VDD33USB and VDD50USB shall
1153:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           be connected together
1154:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1155:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT battery charging ***
1156:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================
1157:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1158:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When VDD is present, the external battery connected to VBAT can be charged through an
1159:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           internal resistance. VBAT charging can be performed either through a 5 KOhm resistor
1160:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           or through a 1.5 KOhm resistor.
1161:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is enabled by HAL_PWREx_EnableBatteryCharging(ResistorValue) function
1162:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           with:
1163:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) ResistorValue:
1164:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_5: 5 KOhm resistor.
1165:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_1_5: 1.5 KOhm resistor.
1166:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is disabled by HAL_PWREx_DisableBatteryCharging() function.
1167:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1168:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1169:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
ARM GAS  /tmp/ccutzvPw.s 			page 62


1170:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1171:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1172:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1173:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the Backup Regulator.
1174:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1175:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1176:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
1177:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1450              		.loc 1 1177 1
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 8
 1453              		@ frame_needed = 1, uses_anonymous_args = 0
 1454 0000 80B5     		push	{r7, lr}
 1455              		.cfi_def_cfa_offset 8
 1456              		.cfi_offset 7, -8
 1457              		.cfi_offset 14, -4
 1458 0002 82B0     		sub	sp, sp, #8
 1459              		.cfi_def_cfa_offset 16
 1460 0004 00AF     		add	r7, sp, #0
 1461              		.cfi_def_cfa_register 7
1178:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1179:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1180:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Backup regulator */
1181:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_CR2_BREN);
 1462              		.loc 1 1181 3
 1463 0006 104B     		ldr	r3, .L95
 1464 0008 9B68     		ldr	r3, [r3, #8]
 1465 000a 0F4A     		ldr	r2, .L95
 1466 000c 43F00103 		orr	r3, r3, #1
 1467 0010 9360     		str	r3, [r2, #8]
1182:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1183:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1184:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 1468              		.loc 1 1184 15
 1469 0012 FFF7FEFF 		bl	HAL_GetTick
 1470 0016 7860     		str	r0, [r7, #4]
1185:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1186:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */
1187:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_BRR))
 1471              		.loc 1 1187 8
 1472 0018 09E0     		b	.L92
 1473              	.L94:
1188:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1189:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 1474              		.loc 1 1189 9
 1475 001a FFF7FEFF 		bl	HAL_GetTick
 1476 001e 0246     		mov	r2, r0
 1477              		.loc 1 1189 23
 1478 0020 7B68     		ldr	r3, [r7, #4]
 1479 0022 D31A     		subs	r3, r2, r3
 1480              		.loc 1 1189 7
 1481 0024 B3F57A7F 		cmp	r3, #1000
 1482 0028 01D9     		bls	.L92
1190:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1191:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 1483              		.loc 1 1191 14
 1484 002a 0323     		movs	r3, #3
ARM GAS  /tmp/ccutzvPw.s 			page 63


 1485 002c 07E0     		b	.L93
 1486              	.L92:
1187:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1487              		.loc 1 1187 10
 1488 002e 064B     		ldr	r3, .L95
 1489 0030 9B68     		ldr	r3, [r3, #8]
 1490 0032 03F48033 		and	r3, r3, #65536
1187:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1491              		.loc 1 1187 8
 1492 0036 B3F5803F 		cmp	r3, #65536
 1493 003a EED1     		bne	.L94
1192:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1193:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1194:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1494              		.loc 1 1194 10
 1495 003c 0023     		movs	r3, #0
 1496              	.L93:
1195:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1497              		.loc 1 1195 1
 1498 003e 1846     		mov	r0, r3
 1499 0040 0837     		adds	r7, r7, #8
 1500              		.cfi_def_cfa_offset 8
 1501 0042 BD46     		mov	sp, r7
 1502              		.cfi_def_cfa_register 13
 1503              		@ sp needed
 1504 0044 80BD     		pop	{r7, pc}
 1505              	.L96:
 1506 0046 00BF     		.align	2
 1507              	.L95:
 1508 0048 00480258 		.word	1476544512
 1509              		.cfi_endproc
 1510              	.LFE157:
 1512              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
 1513              		.align	1
 1514              		.global	HAL_PWREx_DisableBkUpReg
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1518              		.fpu fpv5-d16
 1520              	HAL_PWREx_DisableBkUpReg:
 1521              	.LFB158:
1196:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1197:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1198:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Disable the Backup Regulator.
1199:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1200:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1201:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
1202:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1522              		.loc 1 1202 1
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 8
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526 0000 80B5     		push	{r7, lr}
 1527              		.cfi_def_cfa_offset 8
 1528              		.cfi_offset 7, -8
 1529              		.cfi_offset 14, -4
 1530 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccutzvPw.s 			page 64


 1531              		.cfi_def_cfa_offset 16
 1532 0004 00AF     		add	r7, sp, #0
 1533              		.cfi_def_cfa_register 7
1203:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1204:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1205:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Backup regulator */
1206:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_BREN);
 1534              		.loc 1 1206 3
 1535 0006 104B     		ldr	r3, .L101
 1536 0008 9B68     		ldr	r3, [r3, #8]
 1537 000a 0F4A     		ldr	r2, .L101
 1538 000c 23F00103 		bic	r3, r3, #1
 1539 0010 9360     		str	r3, [r2, #8]
1207:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1208:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1209:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 1540              		.loc 1 1209 15
 1541 0012 FFF7FEFF 		bl	HAL_GetTick
 1542 0016 7860     		str	r0, [r7, #4]
1210:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1211:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is reset */
1212:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 1543              		.loc 1 1212 8
 1544 0018 09E0     		b	.L98
 1545              	.L100:
1213:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1214:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 1546              		.loc 1 1214 9
 1547 001a FFF7FEFF 		bl	HAL_GetTick
 1548 001e 0246     		mov	r2, r0
 1549              		.loc 1 1214 23
 1550 0020 7B68     		ldr	r3, [r7, #4]
 1551 0022 D31A     		subs	r3, r2, r3
 1552              		.loc 1 1214 7
 1553 0024 B3F57A7F 		cmp	r3, #1000
 1554 0028 01D9     		bls	.L98
1215:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1216:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 1555              		.loc 1 1216 14
 1556 002a 0323     		movs	r3, #3
 1557 002c 07E0     		b	.L99
 1558              	.L98:
1212:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1559              		.loc 1 1212 9
 1560 002e 064B     		ldr	r3, .L101
 1561 0030 9B68     		ldr	r3, [r3, #8]
 1562 0032 03F48033 		and	r3, r3, #65536
1212:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1563              		.loc 1 1212 8
 1564 0036 B3F5803F 		cmp	r3, #65536
 1565 003a EED0     		beq	.L100
1217:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1218:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1219:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1566              		.loc 1 1219 10
 1567 003c 0023     		movs	r3, #0
 1568              	.L99:
ARM GAS  /tmp/ccutzvPw.s 			page 65


1220:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1569              		.loc 1 1220 1
 1570 003e 1846     		mov	r0, r3
 1571 0040 0837     		adds	r7, r7, #8
 1572              		.cfi_def_cfa_offset 8
 1573 0042 BD46     		mov	sp, r7
 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 0044 80BD     		pop	{r7, pc}
 1577              	.L102:
 1578 0046 00BF     		.align	2
 1579              	.L101:
 1580 0048 00480258 		.word	1476544512
 1581              		.cfi_endproc
 1582              	.LFE158:
 1584              		.section	.text.HAL_PWREx_EnableUSBReg,"ax",%progbits
 1585              		.align	1
 1586              		.global	HAL_PWREx_EnableUSBReg
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv5-d16
 1592              	HAL_PWREx_EnableUSBReg:
 1593              	.LFB159:
1221:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1222:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1223:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the USB Regulator.
1224:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1225:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1226:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableUSBReg(void)
1227:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1594              		.loc 1 1227 1
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 80B5     		push	{r7, lr}
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 7, -8
 1601              		.cfi_offset 14, -4
 1602 0002 82B0     		sub	sp, sp, #8
 1603              		.cfi_def_cfa_offset 16
 1604 0004 00AF     		add	r7, sp, #0
 1605              		.cfi_def_cfa_register 7
1228:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1229:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1230:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB regulator */
1231:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_USBREGEN);
 1606              		.loc 1 1231 3
 1607 0006 0F4B     		ldr	r3, .L107
 1608 0008 DB68     		ldr	r3, [r3, #12]
 1609 000a 0E4A     		ldr	r2, .L107
 1610 000c 43F00073 		orr	r3, r3, #33554432
 1611 0010 D360     		str	r3, [r2, #12]
1232:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1233:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1234:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 1612              		.loc 1 1234 15
ARM GAS  /tmp/ccutzvPw.s 			page 66


 1613 0012 FFF7FEFF 		bl	HAL_GetTick
 1614 0016 7860     		str	r0, [r7, #4]
1235:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1236:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is set */
1237:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(READ_BIT(PWR->CR3, PWR_CR3_USB33RDY) == 0U)
 1615              		.loc 1 1237 8
 1616 0018 09E0     		b	.L104
 1617              	.L106:
1238:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1239:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 1618              		.loc 1 1239 9
 1619 001a FFF7FEFF 		bl	HAL_GetTick
 1620 001e 0246     		mov	r2, r0
 1621              		.loc 1 1239 23
 1622 0020 7B68     		ldr	r3, [r7, #4]
 1623 0022 D31A     		subs	r3, r2, r3
 1624              		.loc 1 1239 7
 1625 0024 B3F57A7F 		cmp	r3, #1000
 1626 0028 01D9     		bls	.L104
1240:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1241:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 1627              		.loc 1 1241 14
 1628 002a 0323     		movs	r3, #3
 1629 002c 06E0     		b	.L105
 1630              	.L104:
1237:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1631              		.loc 1 1237 9
 1632 002e 054B     		ldr	r3, .L107
 1633 0030 DB68     		ldr	r3, [r3, #12]
 1634 0032 03F08063 		and	r3, r3, #67108864
1237:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1635              		.loc 1 1237 8
 1636 0036 002B     		cmp	r3, #0
 1637 0038 EFD0     		beq	.L106
1242:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1243:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1244:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1245:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1638              		.loc 1 1245 10
 1639 003a 0023     		movs	r3, #0
 1640              	.L105:
1246:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1641              		.loc 1 1246 1
 1642 003c 1846     		mov	r0, r3
 1643 003e 0837     		adds	r7, r7, #8
 1644              		.cfi_def_cfa_offset 8
 1645 0040 BD46     		mov	sp, r7
 1646              		.cfi_def_cfa_register 13
 1647              		@ sp needed
 1648 0042 80BD     		pop	{r7, pc}
 1649              	.L108:
 1650              		.align	2
 1651              	.L107:
 1652 0044 00480258 		.word	1476544512
 1653              		.cfi_endproc
 1654              	.LFE159:
 1656              		.section	.text.HAL_PWREx_DisableUSBReg,"ax",%progbits
ARM GAS  /tmp/ccutzvPw.s 			page 67


 1657              		.align	1
 1658              		.global	HAL_PWREx_DisableUSBReg
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1662              		.fpu fpv5-d16
 1664              	HAL_PWREx_DisableUSBReg:
 1665              	.LFB160:
1247:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1248:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1249:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Disable the USB Regulator.
1250:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1251:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1252:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableUSBReg(void)
1253:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1666              		.loc 1 1253 1
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 8
 1669              		@ frame_needed = 1, uses_anonymous_args = 0
 1670 0000 80B5     		push	{r7, lr}
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 7, -8
 1673              		.cfi_offset 14, -4
 1674 0002 82B0     		sub	sp, sp, #8
 1675              		.cfi_def_cfa_offset 16
 1676 0004 00AF     		add	r7, sp, #0
 1677              		.cfi_def_cfa_register 7
1254:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1255:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1256:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB regulator */
1257:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_USBREGEN);
 1678              		.loc 1 1257 3
 1679 0006 0F4B     		ldr	r3, .L113
 1680 0008 DB68     		ldr	r3, [r3, #12]
 1681 000a 0E4A     		ldr	r2, .L113
 1682 000c 23F00073 		bic	r3, r3, #33554432
 1683 0010 D360     		str	r3, [r2, #12]
1258:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1259:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1260:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 1684              		.loc 1 1260 15
 1685 0012 FFF7FEFF 		bl	HAL_GetTick
 1686 0016 7860     		str	r0, [r7, #4]
1261:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1262:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is reset */
1263:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(READ_BIT(PWR->CR3, PWR_CR3_USB33RDY) != 0U)
 1687              		.loc 1 1263 8
 1688 0018 09E0     		b	.L110
 1689              	.L112:
1264:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1265:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 1690              		.loc 1 1265 9
 1691 001a FFF7FEFF 		bl	HAL_GetTick
 1692 001e 0246     		mov	r2, r0
 1693              		.loc 1 1265 23
 1694 0020 7B68     		ldr	r3, [r7, #4]
 1695 0022 D31A     		subs	r3, r2, r3
ARM GAS  /tmp/ccutzvPw.s 			page 68


 1696              		.loc 1 1265 7
 1697 0024 B3F57A7F 		cmp	r3, #1000
 1698 0028 01D9     		bls	.L110
1266:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1267:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 1699              		.loc 1 1267 14
 1700 002a 0323     		movs	r3, #3
 1701 002c 06E0     		b	.L111
 1702              	.L110:
1263:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1703              		.loc 1 1263 9
 1704 002e 054B     		ldr	r3, .L113
 1705 0030 DB68     		ldr	r3, [r3, #12]
 1706 0032 03F08063 		and	r3, r3, #67108864
1263:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1707              		.loc 1 1263 8
 1708 0036 002B     		cmp	r3, #0
 1709 0038 EFD1     		bne	.L112
1268:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1269:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1270:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1710              		.loc 1 1270 10
 1711 003a 0023     		movs	r3, #0
 1712              	.L111:
1271:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1713              		.loc 1 1271 1
 1714 003c 1846     		mov	r0, r3
 1715 003e 0837     		adds	r7, r7, #8
 1716              		.cfi_def_cfa_offset 8
 1717 0040 BD46     		mov	sp, r7
 1718              		.cfi_def_cfa_register 13
 1719              		@ sp needed
 1720 0042 80BD     		pop	{r7, pc}
 1721              	.L114:
 1722              		.align	2
 1723              	.L113:
 1724 0044 00480258 		.word	1476544512
 1725              		.cfi_endproc
 1726              	.LFE160:
 1728              		.section	.text.HAL_PWREx_EnableUSBVoltageDetector,"ax",%progbits
 1729              		.align	1
 1730              		.global	HAL_PWREx_EnableUSBVoltageDetector
 1731              		.syntax unified
 1732              		.thumb
 1733              		.thumb_func
 1734              		.fpu fpv5-d16
 1736              	HAL_PWREx_EnableUSBVoltageDetector:
 1737              	.LFB161:
1272:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1273:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1274:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the USB voltage level detector.
1275:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1276:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1277:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableUSBVoltageDetector(void)
1278:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1738              		.loc 1 1278 1
 1739              		.cfi_startproc
ARM GAS  /tmp/ccutzvPw.s 			page 69


 1740              		@ args = 0, pretend = 0, frame = 0
 1741              		@ frame_needed = 1, uses_anonymous_args = 0
 1742              		@ link register save eliminated.
 1743 0000 80B4     		push	{r7}
 1744              		.cfi_def_cfa_offset 4
 1745              		.cfi_offset 7, -4
 1746 0002 00AF     		add	r7, sp, #0
 1747              		.cfi_def_cfa_register 7
1279:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB voltage detector */
1280:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 1748              		.loc 1 1280 3
 1749 0004 054B     		ldr	r3, .L116
 1750 0006 DB68     		ldr	r3, [r3, #12]
 1751 0008 044A     		ldr	r2, .L116
 1752 000a 43F08073 		orr	r3, r3, #16777216
 1753 000e D360     		str	r3, [r2, #12]
1281:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1754              		.loc 1 1281 1
 1755 0010 00BF     		nop
 1756 0012 BD46     		mov	sp, r7
 1757              		.cfi_def_cfa_register 13
 1758              		@ sp needed
 1759 0014 5DF8047B 		ldr	r7, [sp], #4
 1760              		.cfi_restore 7
 1761              		.cfi_def_cfa_offset 0
 1762 0018 7047     		bx	lr
 1763              	.L117:
 1764 001a 00BF     		.align	2
 1765              	.L116:
 1766 001c 00480258 		.word	1476544512
 1767              		.cfi_endproc
 1768              	.LFE161:
 1770              		.section	.text.HAL_PWREx_DisableUSBVoltageDetector,"ax",%progbits
 1771              		.align	1
 1772              		.global	HAL_PWREx_DisableUSBVoltageDetector
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv5-d16
 1778              	HAL_PWREx_DisableUSBVoltageDetector:
 1779              	.LFB162:
1282:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1283:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1284:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Disable the USB voltage level detector.
1285:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1286:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1287:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableUSBVoltageDetector(void)
1288:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1780              		.loc 1 1288 1
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 1, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
 1785 0000 80B4     		push	{r7}
 1786              		.cfi_def_cfa_offset 4
 1787              		.cfi_offset 7, -4
 1788 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccutzvPw.s 			page 70


 1789              		.cfi_def_cfa_register 7
1289:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB voltage detector */
1290:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 1790              		.loc 1 1290 3
 1791 0004 054B     		ldr	r3, .L119
 1792 0006 DB68     		ldr	r3, [r3, #12]
 1793 0008 044A     		ldr	r2, .L119
 1794 000a 23F08073 		bic	r3, r3, #16777216
 1795 000e D360     		str	r3, [r2, #12]
1291:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1796              		.loc 1 1291 1
 1797 0010 00BF     		nop
 1798 0012 BD46     		mov	sp, r7
 1799              		.cfi_def_cfa_register 13
 1800              		@ sp needed
 1801 0014 5DF8047B 		ldr	r7, [sp], #4
 1802              		.cfi_restore 7
 1803              		.cfi_def_cfa_offset 0
 1804 0018 7047     		bx	lr
 1805              	.L120:
 1806 001a 00BF     		.align	2
 1807              	.L119:
 1808 001c 00480258 		.word	1476544512
 1809              		.cfi_endproc
 1810              	.LFE162:
 1812              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
 1813              		.align	1
 1814              		.global	HAL_PWREx_EnableBatteryCharging
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu fpv5-d16
 1820              	HAL_PWREx_EnableBatteryCharging:
 1821              	.LFB163:
1292:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1293:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1294:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1295:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the Battery charging.
1296:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When VDD is present, charge the external battery through an internal resistor.
1297:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  ResistorValue: Specifies the charging resistor.
1298:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1299:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_5:   5 KOhm resistor.
1300:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5: 1.5 KOhm resistor.
1301:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1302:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1303:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorValue)
1304:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1822              		.loc 1 1304 1
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 8
 1825              		@ frame_needed = 1, uses_anonymous_args = 0
 1826              		@ link register save eliminated.
 1827 0000 80B4     		push	{r7}
 1828              		.cfi_def_cfa_offset 4
 1829              		.cfi_offset 7, -4
 1830 0002 83B0     		sub	sp, sp, #12
 1831              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccutzvPw.s 			page 71


 1832 0004 00AF     		add	r7, sp, #0
 1833              		.cfi_def_cfa_register 7
 1834 0006 7860     		str	r0, [r7, #4]
1305:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorValue));
1306:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1307:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Specify the charging resistor */
1308:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR3, PWR_CR3_VBRS, ResistorValue);
 1835              		.loc 1 1308 3
 1836 0008 094B     		ldr	r3, .L122
 1837 000a DB68     		ldr	r3, [r3, #12]
 1838 000c 23F40072 		bic	r2, r3, #512
 1839 0010 0749     		ldr	r1, .L122
 1840 0012 7B68     		ldr	r3, [r7, #4]
 1841 0014 1343     		orrs	r3, r3, r2
 1842 0016 CB60     		str	r3, [r1, #12]
1309:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1310:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Battery charging */
1311:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_VBE);
 1843              		.loc 1 1311 3
 1844 0018 054B     		ldr	r3, .L122
 1845 001a DB68     		ldr	r3, [r3, #12]
 1846 001c 044A     		ldr	r2, .L122
 1847 001e 43F48073 		orr	r3, r3, #256
 1848 0022 D360     		str	r3, [r2, #12]
1312:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1849              		.loc 1 1312 1
 1850 0024 00BF     		nop
 1851 0026 0C37     		adds	r7, r7, #12
 1852              		.cfi_def_cfa_offset 4
 1853 0028 BD46     		mov	sp, r7
 1854              		.cfi_def_cfa_register 13
 1855              		@ sp needed
 1856 002a 5DF8047B 		ldr	r7, [sp], #4
 1857              		.cfi_restore 7
 1858              		.cfi_def_cfa_offset 0
 1859 002e 7047     		bx	lr
 1860              	.L123:
 1861              		.align	2
 1862              	.L122:
 1863 0030 00480258 		.word	1476544512
 1864              		.cfi_endproc
 1865              	.LFE163:
 1867              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
 1868              		.align	1
 1869              		.global	HAL_PWREx_DisableBatteryCharging
 1870              		.syntax unified
 1871              		.thumb
 1872              		.thumb_func
 1873              		.fpu fpv5-d16
 1875              	HAL_PWREx_DisableBatteryCharging:
 1876              	.LFB164:
1313:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1314:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1315:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1316:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Disable the Battery charging.
1317:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1318:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/ccutzvPw.s 			page 72


1319:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging(void)
1320:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1877              		.loc 1 1320 1
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 1, uses_anonymous_args = 0
 1881              		@ link register save eliminated.
 1882 0000 80B4     		push	{r7}
 1883              		.cfi_def_cfa_offset 4
 1884              		.cfi_offset 7, -4
 1885 0002 00AF     		add	r7, sp, #0
 1886              		.cfi_def_cfa_register 7
1321:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Battery charging */
1322:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_VBE);
 1887              		.loc 1 1322 3
 1888 0004 054B     		ldr	r3, .L125
 1889 0006 DB68     		ldr	r3, [r3, #12]
 1890 0008 044A     		ldr	r2, .L125
 1891 000a 23F48073 		bic	r3, r3, #256
 1892 000e D360     		str	r3, [r2, #12]
1323:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1893              		.loc 1 1323 1
 1894 0010 00BF     		nop
 1895 0012 BD46     		mov	sp, r7
 1896              		.cfi_def_cfa_register 13
 1897              		@ sp needed
 1898 0014 5DF8047B 		ldr	r7, [sp], #4
 1899              		.cfi_restore 7
 1900              		.cfi_def_cfa_offset 0
 1901 0018 7047     		bx	lr
 1902              	.L126:
 1903 001a 00BF     		.align	2
 1904              	.L125:
 1905 001c 00480258 		.word	1476544512
 1906              		.cfi_endproc
 1907              	.LFE164:
 1909              		.section	.text.HAL_PWREx_EnableMonitoring,"ax",%progbits
 1910              		.align	1
 1911              		.global	HAL_PWREx_EnableMonitoring
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1915              		.fpu fpv5-d16
 1917              	HAL_PWREx_EnableMonitoring:
 1918              	.LFB165:
1324:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1325:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1326:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1327:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1328:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1329:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group4 Power Monitoring functions
1330:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power Monitoring functions
1331:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1332:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1333:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1334:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1335:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Power Monitoring functions #####
ARM GAS  /tmp/ccutzvPw.s 			page 73


1336:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1337:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1338:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT and Temperature supervision ***
1339:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ========================================
1340:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1341:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT battery voltage supply can be monitored by comparing it with two threshold
1342:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels: VBAThigh and VBATlow. VBATH flag and VBATL flags in the PWR control register 2
1343:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (PWR_CR2), indicate if VBAT is higher or lower than the threshold.
1344:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The temperature can be monitored by comparing it with two threshold levels, TEMPhigh
1345:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           and TEMPlow. TEMPH and TEMPL flags, in the PWR control register 2 (PWR_CR2),
1346:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           indicate whether the device temperature is higher or lower than the threshold.
1347:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT and the temperature monitoring is enabled by HAL_PWREx_EnableMonitoring()
1348:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function and disabled by HAL_PWREx_DisableMonitoring() function.
1349:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetVBATLevel() function return the VBAT level which can be:
1350:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_VBAT_BELOW_LOW_THRESHOLD or PWR_VBAT_ABOVE_HIGH_THRESHOLD or
1351:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD.
1352:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetTemperatureLevel() function return the Temperature level which
1353:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           can be: PWR_TEMP_BELOW_LOW_THRESHOLD or PWR_TEMP_ABOVE_HIGH_THRESHOLD or
1354:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD.
1355:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1356:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** AVD configuration ***
1357:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =========================
1358:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1359:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is used to monitor the VDDA power supply by comparing it to a
1360:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           threshold selected by the AVD Level (ALS[3:0] bits in the PWR_CR1 register).
1361:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) A AVDO flag is available to indicate if VDDA is higher or lower
1362:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           than the AVD threshold. This event is internally connected to the EXTI
1363:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           line 16 to generate an interrupt if enabled.
1364:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           It is configurable through __HAL_PWR_AVD_EXTI_ENABLE_IT() macro.
1365:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is stopped in System Standby mode.
1366:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1367:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1368:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1369:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1370:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1371:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1372:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the VBAT and temperature monitoring.
1373:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1374:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1375:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMonitoring(void)
1376:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1919              		.loc 1 1376 1
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 1, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 1924 0000 80B4     		push	{r7}
 1925              		.cfi_def_cfa_offset 4
 1926              		.cfi_offset 7, -4
 1927 0002 00AF     		add	r7, sp, #0
 1928              		.cfi_def_cfa_register 7
1377:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the VBAT and Temperature monitoring */
1378:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_CR2_MONEN);
 1929              		.loc 1 1378 3
 1930 0004 054B     		ldr	r3, .L128
 1931 0006 9B68     		ldr	r3, [r3, #8]
 1932 0008 044A     		ldr	r2, .L128
ARM GAS  /tmp/ccutzvPw.s 			page 74


 1933 000a 43F01003 		orr	r3, r3, #16
 1934 000e 9360     		str	r3, [r2, #8]
1379:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1935              		.loc 1 1379 1
 1936 0010 00BF     		nop
 1937 0012 BD46     		mov	sp, r7
 1938              		.cfi_def_cfa_register 13
 1939              		@ sp needed
 1940 0014 5DF8047B 		ldr	r7, [sp], #4
 1941              		.cfi_restore 7
 1942              		.cfi_def_cfa_offset 0
 1943 0018 7047     		bx	lr
 1944              	.L129:
 1945 001a 00BF     		.align	2
 1946              	.L128:
 1947 001c 00480258 		.word	1476544512
 1948              		.cfi_endproc
 1949              	.LFE165:
 1951              		.section	.text.HAL_PWREx_DisableMonitoring,"ax",%progbits
 1952              		.align	1
 1953              		.global	HAL_PWREx_DisableMonitoring
 1954              		.syntax unified
 1955              		.thumb
 1956              		.thumb_func
 1957              		.fpu fpv5-d16
 1959              	HAL_PWREx_DisableMonitoring:
 1960              	.LFB166:
1380:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1381:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1382:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Disable the VBAT and temperature monitoring.
1383:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1384:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1385:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMonitoring(void)
1386:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1961              		.loc 1 1386 1
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 1, uses_anonymous_args = 0
 1965              		@ link register save eliminated.
 1966 0000 80B4     		push	{r7}
 1967              		.cfi_def_cfa_offset 4
 1968              		.cfi_offset 7, -4
 1969 0002 00AF     		add	r7, sp, #0
 1970              		.cfi_def_cfa_register 7
1387:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the VBAT and Temperature monitoring */
1388:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_MONEN);
 1971              		.loc 1 1388 3
 1972 0004 054B     		ldr	r3, .L131
 1973 0006 9B68     		ldr	r3, [r3, #8]
 1974 0008 044A     		ldr	r2, .L131
 1975 000a 23F01003 		bic	r3, r3, #16
 1976 000e 9360     		str	r3, [r2, #8]
1389:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1977              		.loc 1 1389 1
 1978 0010 00BF     		nop
 1979 0012 BD46     		mov	sp, r7
 1980              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccutzvPw.s 			page 75


 1981              		@ sp needed
 1982 0014 5DF8047B 		ldr	r7, [sp], #4
 1983              		.cfi_restore 7
 1984              		.cfi_def_cfa_offset 0
 1985 0018 7047     		bx	lr
 1986              	.L132:
 1987 001a 00BF     		.align	2
 1988              	.L131:
 1989 001c 00480258 		.word	1476544512
 1990              		.cfi_endproc
 1991              	.LFE166:
 1993              		.section	.text.HAL_PWREx_GetTemperatureLevel,"ax",%progbits
 1994              		.align	1
 1995              		.global	HAL_PWREx_GetTemperatureLevel
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv5-d16
 2001              	HAL_PWREx_GetTemperatureLevel:
 2002              	.LFB167:
1390:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1391:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1392:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Indicate whether the junction temperature is between, above or below the threshold.
1393:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval Temperature level.
1394:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1395:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetTemperatureLevel(void)
1396:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2003              		.loc 1 1396 1
 2004              		.cfi_startproc
 2005              		@ args = 0, pretend = 0, frame = 8
 2006              		@ frame_needed = 1, uses_anonymous_args = 0
 2007              		@ link register save eliminated.
 2008 0000 80B4     		push	{r7}
 2009              		.cfi_def_cfa_offset 4
 2010              		.cfi_offset 7, -4
 2011 0002 83B0     		sub	sp, sp, #12
 2012              		.cfi_def_cfa_offset 16
 2013 0004 00AF     		add	r7, sp, #0
 2014              		.cfi_def_cfa_register 7
1397:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tempLevel;
1398:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regValue;
1399:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1400:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the temperature flags */
1401:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = PWR->CR2 & (PWR_CR2_TEMPH | PWR_CR2_TEMPL);
 2015              		.loc 1 1401 17
 2016 0006 0F4B     		ldr	r3, .L138
 2017 0008 9B68     		ldr	r3, [r3, #8]
 2018              		.loc 1 1401 12
 2019 000a 03F44003 		and	r3, r3, #12582912
 2020 000e 3B60     		str	r3, [r7]
1402:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1403:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Compare the read value to the temperature threshold */
1404:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(regValue == PWR_CR2_TEMPL)
 2021              		.loc 1 1404 5
 2022 0010 3B68     		ldr	r3, [r7]
 2023 0012 B3F5800F 		cmp	r3, #4194304
 2024 0016 03D1     		bne	.L134
ARM GAS  /tmp/ccutzvPw.s 			page 76


1405:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1406:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
 2025              		.loc 1 1406 15
 2026 0018 4FF48003 		mov	r3, #4194304
 2027 001c 7B60     		str	r3, [r7, #4]
 2028 001e 09E0     		b	.L135
 2029              	.L134:
1407:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1408:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if(regValue == PWR_CR2_TEMPH)
 2030              		.loc 1 1408 10
 2031 0020 3B68     		ldr	r3, [r7]
 2032 0022 B3F5000F 		cmp	r3, #8388608
 2033 0026 03D1     		bne	.L136
1409:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1410:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
 2034              		.loc 1 1410 15
 2035 0028 4FF40003 		mov	r3, #8388608
 2036 002c 7B60     		str	r3, [r7, #4]
 2037 002e 01E0     		b	.L135
 2038              	.L136:
1411:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1412:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1413:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1414:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 2039              		.loc 1 1414 15
 2040 0030 0023     		movs	r3, #0
 2041 0032 7B60     		str	r3, [r7, #4]
 2042              	.L135:
1415:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1416:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1417:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return tempLevel;
 2043              		.loc 1 1417 10
 2044 0034 7B68     		ldr	r3, [r7, #4]
1418:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2045              		.loc 1 1418 1
 2046 0036 1846     		mov	r0, r3
 2047 0038 0C37     		adds	r7, r7, #12
 2048              		.cfi_def_cfa_offset 4
 2049 003a BD46     		mov	sp, r7
 2050              		.cfi_def_cfa_register 13
 2051              		@ sp needed
 2052 003c 5DF8047B 		ldr	r7, [sp], #4
 2053              		.cfi_restore 7
 2054              		.cfi_def_cfa_offset 0
 2055 0040 7047     		bx	lr
 2056              	.L139:
 2057 0042 00BF     		.align	2
 2058              	.L138:
 2059 0044 00480258 		.word	1476544512
 2060              		.cfi_endproc
 2061              	.LFE167:
 2063              		.section	.text.HAL_PWREx_GetVBATLevel,"ax",%progbits
 2064              		.align	1
 2065              		.global	HAL_PWREx_GetVBATLevel
 2066              		.syntax unified
 2067              		.thumb
 2068              		.thumb_func
ARM GAS  /tmp/ccutzvPw.s 			page 77


 2069              		.fpu fpv5-d16
 2071              	HAL_PWREx_GetVBATLevel:
 2072              	.LFB168:
1419:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1420:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1421:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Indicate whether the Battery voltage level is between, above or below the threshold.
1422:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval VBAT level.
1423:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1424:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVBATLevel(void)
1425:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2073              		.loc 1 1425 1
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 8
 2076              		@ frame_needed = 1, uses_anonymous_args = 0
 2077              		@ link register save eliminated.
 2078 0000 80B4     		push	{r7}
 2079              		.cfi_def_cfa_offset 4
 2080              		.cfi_offset 7, -4
 2081 0002 83B0     		sub	sp, sp, #12
 2082              		.cfi_def_cfa_offset 16
 2083 0004 00AF     		add	r7, sp, #0
 2084              		.cfi_def_cfa_register 7
1426:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t VBATLevel;
1427:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regValue;
1428:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1429:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the VBAT flags */
1430:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = PWR->CR2 & (PWR_CR2_VBATH | PWR_CR2_VBATL);
 2085              		.loc 1 1430 17
 2086 0006 0F4B     		ldr	r3, .L145
 2087 0008 9B68     		ldr	r3, [r3, #8]
 2088              		.loc 1 1430 12
 2089 000a 03F44013 		and	r3, r3, #3145728
 2090 000e 3B60     		str	r3, [r7]
1431:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1432:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Compare the read value to the VBAT threshold */
1433:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(regValue == PWR_CR2_VBATL)
 2091              		.loc 1 1433 5
 2092 0010 3B68     		ldr	r3, [r7]
 2093 0012 B3F5801F 		cmp	r3, #1048576
 2094 0016 03D1     		bne	.L141
1434:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1435:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
 2095              		.loc 1 1435 15
 2096 0018 4FF48013 		mov	r3, #1048576
 2097 001c 7B60     		str	r3, [r7, #4]
 2098 001e 09E0     		b	.L142
 2099              	.L141:
1436:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1437:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if(regValue == PWR_CR2_VBATH)
 2100              		.loc 1 1437 10
 2101 0020 3B68     		ldr	r3, [r7]
 2102 0022 B3F5001F 		cmp	r3, #2097152
 2103 0026 03D1     		bne	.L143
1438:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1439:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
 2104              		.loc 1 1439 15
 2105 0028 4FF40013 		mov	r3, #2097152
ARM GAS  /tmp/ccutzvPw.s 			page 78


 2106 002c 7B60     		str	r3, [r7, #4]
 2107 002e 01E0     		b	.L142
 2108              	.L143:
1440:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1441:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1442:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1443:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 2109              		.loc 1 1443 15
 2110 0030 0023     		movs	r3, #0
 2111 0032 7B60     		str	r3, [r7, #4]
 2112              	.L142:
1444:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1445:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1446:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return VBATLevel;
 2113              		.loc 1 1446 10
 2114 0034 7B68     		ldr	r3, [r7, #4]
1447:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2115              		.loc 1 1447 1
 2116 0036 1846     		mov	r0, r3
 2117 0038 0C37     		adds	r7, r7, #12
 2118              		.cfi_def_cfa_offset 4
 2119 003a BD46     		mov	sp, r7
 2120              		.cfi_def_cfa_register 13
 2121              		@ sp needed
 2122 003c 5DF8047B 		ldr	r7, [sp], #4
 2123              		.cfi_restore 7
 2124              		.cfi_def_cfa_offset 0
 2125 0040 7047     		bx	lr
 2126              	.L146:
 2127 0042 00BF     		.align	2
 2128              	.L145:
 2129 0044 00480258 		.word	1476544512
 2130              		.cfi_endproc
 2131              	.LFE168:
 2133              		.section	.text.HAL_PWREx_ConfigAVD,"ax",%progbits
 2134              		.align	1
 2135              		.global	HAL_PWREx_ConfigAVD
 2136              		.syntax unified
 2137              		.thumb
 2138              		.thumb_func
 2139              		.fpu fpv5-d16
 2141              	HAL_PWREx_ConfigAVD:
 2142              	.LFB169:
1448:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1449:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1450:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the analog voltage threshold detected by the Analog Voltage Detector(AVD).
1451:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sConfigAVD: pointer to an PWR_AVDTypeDef structure that contains the configuration
1452:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     information for the AVD.
1453:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Refer to the electrical characteristics of your device datasheet for more details
1454:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         about the voltage threshold corresponding to each detection level.
1455:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1456:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1457:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigAVD(PWREx_AVDTypeDef *sConfigAVD)
1458:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2143              		.loc 1 1458 1
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccutzvPw.s 			page 79


 2146              		@ frame_needed = 1, uses_anonymous_args = 0
 2147              		@ link register save eliminated.
 2148 0000 80B4     		push	{r7}
 2149              		.cfi_def_cfa_offset 4
 2150              		.cfi_offset 7, -4
 2151 0002 83B0     		sub	sp, sp, #12
 2152              		.cfi_def_cfa_offset 16
 2153 0004 00AF     		add	r7, sp, #0
 2154              		.cfi_def_cfa_register 7
 2155 0006 7860     		str	r0, [r7, #4]
1459:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1460:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_AVD_LEVEL(sConfigAVD->AVDLevel));
1461:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_AVD_MODE(sConfigAVD->Mode));
1462:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1463:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the ALS[18:17] bits according to AVDLevel value */
1464:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
 2156              		.loc 1 1464 3
 2157 0008 374B     		ldr	r3, .L153
 2158 000a 1B68     		ldr	r3, [r3]
 2159 000c 23F4C022 		bic	r2, r3, #393216
 2160 0010 7B68     		ldr	r3, [r7, #4]
 2161 0012 1B68     		ldr	r3, [r3]
 2162 0014 3449     		ldr	r1, .L153
 2163 0016 1343     		orrs	r3, r3, r2
 2164 0018 0B60     		str	r3, [r1]
1465:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1466:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear any previous config */
1467:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1468:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_EVENT();
 2165              		.loc 1 1468 3
 2166 001a 4FF0B043 		mov	r3, #1476395008
 2167 001e D3F88430 		ldr	r3, [r3, #132]
 2168 0022 4FF0B042 		mov	r2, #1476395008
 2169 0026 23F48033 		bic	r3, r3, #65536
 2170 002a C2F88430 		str	r3, [r2, #132]
1469:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_IT();
 2171              		.loc 1 1469 3
 2172 002e 4FF0B043 		mov	r3, #1476395008
 2173 0032 D3F88030 		ldr	r3, [r3, #128]
 2174 0036 4FF0B042 		mov	r2, #1476395008
 2175 003a 23F48033 		bic	r3, r3, #65536
 2176 003e C2F88030 		str	r3, [r2, #128]
1470:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif
1471:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE();
 2177              		.loc 1 1471 3
 2178 0042 4FF0B043 		mov	r3, #1476395008
 2179 0046 1B68     		ldr	r3, [r3]
 2180 0048 4FF0B042 		mov	r2, #1476395008
 2181 004c 23F48033 		bic	r3, r3, #65536
 2182 0050 1360     		str	r3, [r2]
1472:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE();
 2183              		.loc 1 1472 3
 2184 0052 4FF0B043 		mov	r3, #1476395008
 2185 0056 5B68     		ldr	r3, [r3, #4]
 2186 0058 4FF0B042 		mov	r2, #1476395008
 2187 005c 23F48033 		bic	r3, r3, #65536
 2188 0060 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccutzvPw.s 			page 80


1473:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1474:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1475:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the interrupt mode */
1476:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(AVD_MODE_IT == (sConfigAVD->Mode & AVD_MODE_IT))
 2189              		.loc 1 1476 32
 2190 0062 7B68     		ldr	r3, [r7, #4]
 2191 0064 5B68     		ldr	r3, [r3, #4]
 2192              		.loc 1 1476 39
 2193 0066 03F48033 		and	r3, r3, #65536
 2194              		.loc 1 1476 5
 2195 006a 002B     		cmp	r3, #0
 2196 006c 09D0     		beq	.L148
1477:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1478:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_IT();
 2197              		.loc 1 1478 5
 2198 006e 4FF0B043 		mov	r3, #1476395008
 2199 0072 D3F88030 		ldr	r3, [r3, #128]
 2200 0076 4FF0B042 		mov	r2, #1476395008
 2201 007a 43F48033 		orr	r3, r3, #65536
 2202 007e C2F88030 		str	r3, [r2, #128]
 2203              	.L148:
1479:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1480:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1481:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the event mode */
1482:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(AVD_MODE_EVT == (sConfigAVD->Mode & AVD_MODE_EVT))
 2204              		.loc 1 1482 33
 2205 0082 7B68     		ldr	r3, [r7, #4]
 2206 0084 5B68     		ldr	r3, [r3, #4]
 2207              		.loc 1 1482 40
 2208 0086 03F40033 		and	r3, r3, #131072
 2209              		.loc 1 1482 5
 2210 008a 002B     		cmp	r3, #0
 2211 008c 09D0     		beq	.L149
1483:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1484:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_EVENT();
 2212              		.loc 1 1484 5
 2213 008e 4FF0B043 		mov	r3, #1476395008
 2214 0092 D3F88430 		ldr	r3, [r3, #132]
 2215 0096 4FF0B042 		mov	r2, #1476395008
 2216 009a 43F48033 		orr	r3, r3, #65536
 2217 009e C2F88430 		str	r3, [r2, #132]
 2218              	.L149:
1485:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1486:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif
1487:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the edge */
1488:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(AVD_RISING_EDGE == (sConfigAVD->Mode & AVD_RISING_EDGE))
 2219              		.loc 1 1488 36
 2220 00a2 7B68     		ldr	r3, [r7, #4]
 2221 00a4 5B68     		ldr	r3, [r3, #4]
 2222              		.loc 1 1488 43
 2223 00a6 03F00103 		and	r3, r3, #1
 2224              		.loc 1 1488 5
 2225 00aa 002B     		cmp	r3, #0
 2226 00ac 07D0     		beq	.L150
1489:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1490:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE();
 2227              		.loc 1 1490 5
ARM GAS  /tmp/ccutzvPw.s 			page 81


 2228 00ae 4FF0B043 		mov	r3, #1476395008
 2229 00b2 1B68     		ldr	r3, [r3]
 2230 00b4 4FF0B042 		mov	r2, #1476395008
 2231 00b8 43F48033 		orr	r3, r3, #65536
 2232 00bc 1360     		str	r3, [r2]
 2233              	.L150:
1491:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1492:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1493:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(AVD_FALLING_EDGE == (sConfigAVD->Mode & AVD_FALLING_EDGE))
 2234              		.loc 1 1493 37
 2235 00be 7B68     		ldr	r3, [r7, #4]
 2236 00c0 5B68     		ldr	r3, [r3, #4]
 2237              		.loc 1 1493 44
 2238 00c2 03F00203 		and	r3, r3, #2
 2239              		.loc 1 1493 5
 2240 00c6 002B     		cmp	r3, #0
 2241 00c8 07D0     		beq	.L152
1494:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1495:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE();
 2242              		.loc 1 1495 5
 2243 00ca 4FF0B043 		mov	r3, #1476395008
 2244 00ce 5B68     		ldr	r3, [r3, #4]
 2245 00d0 4FF0B042 		mov	r2, #1476395008
 2246 00d4 43F48033 		orr	r3, r3, #65536
 2247 00d8 5360     		str	r3, [r2, #4]
 2248              	.L152:
1496:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1497:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2249              		.loc 1 1497 1
 2250 00da 00BF     		nop
 2251 00dc 0C37     		adds	r7, r7, #12
 2252              		.cfi_def_cfa_offset 4
 2253 00de BD46     		mov	sp, r7
 2254              		.cfi_def_cfa_register 13
 2255              		@ sp needed
 2256 00e0 5DF8047B 		ldr	r7, [sp], #4
 2257              		.cfi_restore 7
 2258              		.cfi_def_cfa_offset 0
 2259 00e4 7047     		bx	lr
 2260              	.L154:
 2261 00e6 00BF     		.align	2
 2262              	.L153:
 2263 00e8 00480258 		.word	1476544512
 2264              		.cfi_endproc
 2265              	.LFE169:
 2267              		.section	.text.HAL_PWREx_EnableAVD,"ax",%progbits
 2268              		.align	1
 2269              		.global	HAL_PWREx_EnableAVD
 2270              		.syntax unified
 2271              		.thumb
 2272              		.thumb_func
 2273              		.fpu fpv5-d16
 2275              	HAL_PWREx_EnableAVD:
 2276              	.LFB170:
1498:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1499:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1500:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Enable the Analog Voltage Detector(AVD).
ARM GAS  /tmp/ccutzvPw.s 			page 82


1501:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1502:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1503:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAVD(void)
1504:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2277              		.loc 1 1504 1
 2278              		.cfi_startproc
 2279              		@ args = 0, pretend = 0, frame = 0
 2280              		@ frame_needed = 1, uses_anonymous_args = 0
 2281              		@ link register save eliminated.
 2282 0000 80B4     		push	{r7}
 2283              		.cfi_def_cfa_offset 4
 2284              		.cfi_offset 7, -4
 2285 0002 00AF     		add	r7, sp, #0
 2286              		.cfi_def_cfa_register 7
1505:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog Voltage Detector */
1506:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR1, PWR_CR1_AVDEN);
 2287              		.loc 1 1506 3
 2288 0004 054B     		ldr	r3, .L156
 2289 0006 1B68     		ldr	r3, [r3]
 2290 0008 044A     		ldr	r2, .L156
 2291 000a 43F48033 		orr	r3, r3, #65536
 2292 000e 1360     		str	r3, [r2]
1507:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2293              		.loc 1 1507 1
 2294 0010 00BF     		nop
 2295 0012 BD46     		mov	sp, r7
 2296              		.cfi_def_cfa_register 13
 2297              		@ sp needed
 2298 0014 5DF8047B 		ldr	r7, [sp], #4
 2299              		.cfi_restore 7
 2300              		.cfi_def_cfa_offset 0
 2301 0018 7047     		bx	lr
 2302              	.L157:
 2303 001a 00BF     		.align	2
 2304              	.L156:
 2305 001c 00480258 		.word	1476544512
 2306              		.cfi_endproc
 2307              	.LFE170:
 2309              		.section	.text.HAL_PWREx_DisableAVD,"ax",%progbits
 2310              		.align	1
 2311              		.global	HAL_PWREx_DisableAVD
 2312              		.syntax unified
 2313              		.thumb
 2314              		.thumb_func
 2315              		.fpu fpv5-d16
 2317              	HAL_PWREx_DisableAVD:
 2318              	.LFB171:
1508:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1509:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1510:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Disable the Analog Voltage Detector(AVD).
1511:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1512:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1513:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAVD(void)
1514:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2319              		.loc 1 1514 1
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccutzvPw.s 			page 83


 2322              		@ frame_needed = 1, uses_anonymous_args = 0
 2323              		@ link register save eliminated.
 2324 0000 80B4     		push	{r7}
 2325              		.cfi_def_cfa_offset 4
 2326              		.cfi_offset 7, -4
 2327 0002 00AF     		add	r7, sp, #0
 2328              		.cfi_def_cfa_register 7
1515:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog Voltage Detector */
1516:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_AVDEN);
 2329              		.loc 1 1516 3
 2330 0004 054B     		ldr	r3, .L159
 2331 0006 1B68     		ldr	r3, [r3]
 2332 0008 044A     		ldr	r2, .L159
 2333 000a 23F48033 		bic	r3, r3, #65536
 2334 000e 1360     		str	r3, [r2]
1517:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2335              		.loc 1 1517 1
 2336 0010 00BF     		nop
 2337 0012 BD46     		mov	sp, r7
 2338              		.cfi_def_cfa_register 13
 2339              		@ sp needed
 2340 0014 5DF8047B 		ldr	r7, [sp], #4
 2341              		.cfi_restore 7
 2342              		.cfi_def_cfa_offset 0
 2343 0018 7047     		bx	lr
 2344              	.L160:
 2345 001a 00BF     		.align	2
 2346              	.L159:
 2347 001c 00480258 		.word	1476544512
 2348              		.cfi_endproc
 2349              	.LFE171:
 2351              		.section	.text.HAL_PWREx_PVD_AVD_IRQHandler,"ax",%progbits
 2352              		.align	1
 2353              		.global	HAL_PWREx_PVD_AVD_IRQHandler
 2354              		.syntax unified
 2355              		.thumb
 2356              		.thumb_func
 2357              		.fpu fpv5-d16
 2359              	HAL_PWREx_PVD_AVD_IRQHandler:
 2360              	.LFB172:
1518:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1519:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1520:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR PVD/AVD interrupt request.
1521:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the PVD_AVD_IRQHandler().
1522:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1523:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1524:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_AVD_IRQHandler(void)
1525:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2361              		.loc 1 1525 1
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 0
 2364              		@ frame_needed = 1, uses_anonymous_args = 0
 2365 0000 80B5     		push	{r7, lr}
 2366              		.cfi_def_cfa_offset 8
 2367              		.cfi_offset 7, -8
 2368              		.cfi_offset 14, -4
 2369 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccutzvPw.s 			page 84


 2370              		.cfi_def_cfa_register 7
1526:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(DUAL_CORE)
1527:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* PVD EXTI line interrupt detected */
1528:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(READ_BIT(PWR->CR1, PWR_CR1_PVDEN) != 0U)
1529:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1530:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID() == CM7_CPUID)
1531:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1532:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR D1 EXTI flag */
1533:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
1534:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
1535:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
1536:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback();
1537:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1538:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1 pending bit */
1539:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
1540:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
1541:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1542:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1543:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1544:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
1545:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if(__HAL_PWR_PVD_EXTID2_GET_FLAG() != RESET)
1546:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
1547:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
1548:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback();
1549:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1550:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
1551:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTID2_CLEAR_FLAG();
1552:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
1553:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1554:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1555:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1556:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* AVD EXTI line interrupt detected */
1557:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(READ_BIT(PWR->CR1, PWR_CR1_AVDEN) != 0U)
1558:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1559:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID() == CM7_CPUID)
1560:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1561:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D1 flag */
1562:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if(__HAL_PWR_AVD_EXTI_GET_FLAG() != RESET)
1563:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
1564:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
1565:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback();
1566:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1567:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1 pending bit */
1568:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTI_CLEAR_FLAG();
1569:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
1570:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1571:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1572:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1573:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
1574:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if(__HAL_PWR_AVD_EXTID2_GET_FLAG() != RESET)
1575:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
1576:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
1577:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback();
1578:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1579:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
1580:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTID2_CLEAR_FLAG();
1581:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
ARM GAS  /tmp/ccutzvPw.s 			page 85


1582:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1583:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1584:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
1585:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* PVD EXTI line interrupt detected */
1586:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(READ_BIT(PWR->CR1, PWR_CR1_PVDEN) != 0U)
 2371              		.loc 1 1586 6
 2372 0004 1B4B     		ldr	r3, .L165
 2373 0006 1B68     		ldr	r3, [r3]
 2374 0008 03F01003 		and	r3, r3, #16
 2375              		.loc 1 1586 5
 2376 000c 002B     		cmp	r3, #0
 2377 000e 14D0     		beq	.L162
1587:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1588:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check PWR EXTI flag */
1589:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 2378              		.loc 1 1589 8
 2379 0010 4FF0B043 		mov	r3, #1476395008
 2380 0014 D3F88830 		ldr	r3, [r3, #136]
 2381 0018 03F48033 		and	r3, r3, #65536
 2382              		.loc 1 1589 7
 2383 001c B3F5803F 		cmp	r3, #65536
 2384 0020 0BD1     		bne	.L162
1590:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1591:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* PWR PVD interrupt user callback */
1592:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       HAL_PWR_PVDCallback();
 2385              		.loc 1 1592 7
 2386 0022 FFF7FEFF 		bl	HAL_PWR_PVDCallback
1593:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1594:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Clear PWR EXTI pending bit */
1595:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 2387              		.loc 1 1595 7
 2388 0026 4FF0B043 		mov	r3, #1476395008
 2389 002a D3F88830 		ldr	r3, [r3, #136]
 2390 002e 4FF0B042 		mov	r2, #1476395008
 2391 0032 43F48033 		orr	r3, r3, #65536
 2392 0036 C2F88830 		str	r3, [r2, #136]
 2393              	.L162:
1596:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1597:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1598:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1599:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* AVD EXTI line interrupt detected */
1600:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if(READ_BIT(PWR->CR1, PWR_CR1_AVDEN) != 0U)
 2394              		.loc 1 1600 6
 2395 003a 0E4B     		ldr	r3, .L165
 2396 003c 1B68     		ldr	r3, [r3]
 2397 003e 03F48033 		and	r3, r3, #65536
 2398              		.loc 1 1600 5
 2399 0042 002B     		cmp	r3, #0
 2400 0044 14D0     		beq	.L164
1601:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1602:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check PWR EXTI flag */
1603:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if(__HAL_PWR_AVD_EXTI_GET_FLAG() != RESET)
 2401              		.loc 1 1603 8
 2402 0046 4FF0B043 		mov	r3, #1476395008
 2403 004a D3F88830 		ldr	r3, [r3, #136]
 2404 004e 03F48033 		and	r3, r3, #65536
 2405              		.loc 1 1603 7
ARM GAS  /tmp/ccutzvPw.s 			page 86


 2406 0052 B3F5803F 		cmp	r3, #65536
 2407 0056 0BD1     		bne	.L164
1604:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1605:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* PWR AVD interrupt user callback */
1606:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       HAL_PWREx_AVDCallback();
 2408              		.loc 1 1606 7
 2409 0058 FFF7FEFF 		bl	HAL_PWREx_AVDCallback
1607:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1608:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Clear PWR EXTI pending bit */
1609:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __HAL_PWR_AVD_EXTI_CLEAR_FLAG();
 2410              		.loc 1 1609 7
 2411 005c 4FF0B043 		mov	r3, #1476395008
 2412 0060 D3F88830 		ldr	r3, [r3, #136]
 2413 0064 4FF0B042 		mov	r2, #1476395008
 2414 0068 43F48033 		orr	r3, r3, #65536
 2415 006c C2F88830 		str	r3, [r2, #136]
 2416              	.L164:
1610:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1611:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1612:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
1613:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2417              		.loc 1 1613 1
 2418 0070 00BF     		nop
 2419 0072 80BD     		pop	{r7, pc}
 2420              	.L166:
 2421              		.align	2
 2422              	.L165:
 2423 0074 00480258 		.word	1476544512
 2424              		.cfi_endproc
 2425              	.LFE172:
 2427              		.section	.text.HAL_PWREx_AVDCallback,"ax",%progbits
 2428              		.align	1
 2429              		.weak	HAL_PWREx_AVDCallback
 2430              		.syntax unified
 2431              		.thumb
 2432              		.thumb_func
 2433              		.fpu fpv5-d16
 2435              	HAL_PWREx_AVDCallback:
 2436              	.LFB173:
1614:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1615:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1616:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  PWR AVD interrupt callback
1617:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1618:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1619:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_AVDCallback(void)
1620:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2437              		.loc 1 1620 1
 2438              		.cfi_startproc
 2439              		@ args = 0, pretend = 0, frame = 0
 2440              		@ frame_needed = 1, uses_anonymous_args = 0
 2441              		@ link register save eliminated.
 2442 0000 80B4     		push	{r7}
 2443              		.cfi_def_cfa_offset 4
 2444              		.cfi_offset 7, -4
 2445 0002 00AF     		add	r7, sp, #0
 2446              		.cfi_def_cfa_register 7
1621:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/ccutzvPw.s 			page 87


1622:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWR_AVDCallback could be implemented in the user file
1623:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    */
1624:./Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2447              		.loc 1 1624 1
 2448 0004 00BF     		nop
 2449 0006 BD46     		mov	sp, r7
 2450              		.cfi_def_cfa_register 13
 2451              		@ sp needed
 2452 0008 5DF8047B 		ldr	r7, [sp], #4
 2453              		.cfi_restore 7
 2454              		.cfi_def_cfa_offset 0
 2455 000c 7047     		bx	lr
 2456              		.cfi_endproc
 2457              	.LFE173:
 2459              		.text
 2460              	.Letext0:
 2461              		.file 3 "/mnt/d/GNU Tools ARM Embedded/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/ma
 2462              		.file 4 "/mnt/d/GNU Tools ARM Embedded/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sy
 2463              		.file 5 "./Drivers/CMSIS/Include/core_cm7.h"
 2464              		.file 6 "./Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2465              		.file 7 "./Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 2466              		.file 8 "/mnt/d/GNU Tools ARM Embedded/gcc-arm-none-eabi-8-2019-q3-update/lib/gcc/arm-none-eabi/8.
 2467              		.file 9 "/mnt/d/GNU Tools ARM Embedded/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sy
 2468              		.file 10 "/mnt/d/GNU Tools ARM Embedded/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/s
 2469              		.file 11 "/mnt/d/GNU Tools ARM Embedded/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/s
 2470              		.file 12 "/mnt/d/GNU Tools ARM Embedded/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/m
 2471              		.file 13 "./Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 2472              		.file 14 "./Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2473              		.file 15 "./Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 2474              		.file 16 "./Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
ARM GAS  /tmp/ccutzvPw.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_pwr_ex.c
     /tmp/ccutzvPw.s:17     .text.HAL_PWREx_ConfigSupply:0000000000000000 $t
     /tmp/ccutzvPw.s:25     .text.HAL_PWREx_ConfigSupply:0000000000000000 HAL_PWREx_ConfigSupply
     /tmp/ccutzvPw.s:109    .text.HAL_PWREx_ConfigSupply:000000000000006c $d
     /tmp/ccutzvPw.s:114    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 $t
     /tmp/ccutzvPw.s:121    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 HAL_PWREx_GetSupplyConfig
     /tmp/ccutzvPw.s:150    .text.HAL_PWREx_GetSupplyConfig:0000000000000018 $d
     /tmp/ccutzvPw.s:155    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 $t
     /tmp/ccutzvPw.s:162    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 HAL_PWREx_ControlVoltageScaling
     /tmp/ccutzvPw.s:225    .text.HAL_PWREx_ControlVoltageScaling:000000000000004c $d
     /tmp/ccutzvPw.s:230    .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/ccutzvPw.s:237    .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/ccutzvPw.s:266    .text.HAL_PWREx_GetVoltageRange:0000000000000018 $d
     /tmp/ccutzvPw.s:271    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 $t
     /tmp/ccutzvPw.s:278    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 HAL_PWREx_ControlStopModeVoltageScaling
     /tmp/ccutzvPw.s:317    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000028 $d
     /tmp/ccutzvPw.s:322    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 $t
     /tmp/ccutzvPw.s:329    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 HAL_PWREx_GetStopModeVoltageRange
     /tmp/ccutzvPw.s:358    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000018 $d
     /tmp/ccutzvPw.s:363    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 $t
     /tmp/ccutzvPw.s:370    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 HAL_PWREx_EnterSTOPMode
     /tmp/ccutzvPw.s:499    .text.HAL_PWREx_EnterSTOPMode:000000000000008c $d
     /tmp/ccutzvPw.s:505    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 $t
     /tmp/ccutzvPw.s:512    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 HAL_PWREx_ClearPendingEvent
     /tmp/ccutzvPw.s:544    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccutzvPw.s:551    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 HAL_PWREx_EnterSTANDBYMode
     /tmp/ccutzvPw.s:626    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000058 $d
     /tmp/ccutzvPw.s:632    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 $t
     /tmp/ccutzvPw.s:639    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 HAL_PWREx_ConfigD3Domain
     /tmp/ccutzvPw.s:676    .text.HAL_PWREx_ConfigD3Domain:0000000000000024 $d
     /tmp/ccutzvPw.s:681    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 $t
     /tmp/ccutzvPw.s:688    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/ccutzvPw.s:718    .text.HAL_PWREx_EnableFlashPowerDown:000000000000001c $d
     /tmp/ccutzvPw.s:723    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 $t
     /tmp/ccutzvPw.s:730    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 HAL_PWREx_DisableFlashPowerDown
     /tmp/ccutzvPw.s:760    .text.HAL_PWREx_DisableFlashPowerDown:000000000000001c $d
     /tmp/ccutzvPw.s:765    .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccutzvPw.s:772    .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 HAL_PWREx_EnableWakeUpPin
     /tmp/ccutzvPw.s:955    .text.HAL_PWREx_EnableWakeUpPin:00000000000000e4 $d
     /tmp/ccutzvPw.s:960    .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccutzvPw.s:967    .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 HAL_PWREx_DisableWakeUpPin
     /tmp/ccutzvPw.s:1004   .text.HAL_PWREx_DisableWakeUpPin:0000000000000024 $d
     /tmp/ccutzvPw.s:1009   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 $t
     /tmp/ccutzvPw.s:1016   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 HAL_PWREx_GetWakeupFlag
     /tmp/ccutzvPw.s:1051   .text.HAL_PWREx_GetWakeupFlag:000000000000001c $d
     /tmp/ccutzvPw.s:1056   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 $t
     /tmp/ccutzvPw.s:1063   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 HAL_PWREx_ClearWakeupFlag
     /tmp/ccutzvPw.s:1115   .text.HAL_PWREx_ClearWakeupFlag:0000000000000034 $d
     /tmp/ccutzvPw.s:1120   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 $t
     /tmp/ccutzvPw.s:1127   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 HAL_PWREx_WAKEUP_PIN_IRQHandler
     /tmp/ccutzvPw.s:1256   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 HAL_PWREx_WKUP1_Callback
     /tmp/ccutzvPw.s:1288   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 HAL_PWREx_WKUP2_Callback
     /tmp/ccutzvPw.s:1320   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 HAL_PWREx_WKUP3_Callback
     /tmp/ccutzvPw.s:1352   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 HAL_PWREx_WKUP4_Callback
     /tmp/ccutzvPw.s:1384   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 HAL_PWREx_WKUP5_Callback
     /tmp/ccutzvPw.s:1416   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 HAL_PWREx_WKUP6_Callback
ARM GAS  /tmp/ccutzvPw.s 			page 89


     /tmp/ccutzvPw.s:1244   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:00000000000000b0 $d
     /tmp/ccutzvPw.s:1249   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 $t
     /tmp/ccutzvPw.s:1281   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 $t
     /tmp/ccutzvPw.s:1313   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 $t
     /tmp/ccutzvPw.s:1345   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 $t
     /tmp/ccutzvPw.s:1377   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 $t
     /tmp/ccutzvPw.s:1409   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 $t
     /tmp/ccutzvPw.s:1441   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 $t
     /tmp/ccutzvPw.s:1448   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 HAL_PWREx_EnableBkUpReg
     /tmp/ccutzvPw.s:1508   .text.HAL_PWREx_EnableBkUpReg:0000000000000048 $d
     /tmp/ccutzvPw.s:1513   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 $t
     /tmp/ccutzvPw.s:1520   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 HAL_PWREx_DisableBkUpReg
     /tmp/ccutzvPw.s:1580   .text.HAL_PWREx_DisableBkUpReg:0000000000000048 $d
     /tmp/ccutzvPw.s:1585   .text.HAL_PWREx_EnableUSBReg:0000000000000000 $t
     /tmp/ccutzvPw.s:1592   .text.HAL_PWREx_EnableUSBReg:0000000000000000 HAL_PWREx_EnableUSBReg
     /tmp/ccutzvPw.s:1652   .text.HAL_PWREx_EnableUSBReg:0000000000000044 $d
     /tmp/ccutzvPw.s:1657   .text.HAL_PWREx_DisableUSBReg:0000000000000000 $t
     /tmp/ccutzvPw.s:1664   .text.HAL_PWREx_DisableUSBReg:0000000000000000 HAL_PWREx_DisableUSBReg
     /tmp/ccutzvPw.s:1724   .text.HAL_PWREx_DisableUSBReg:0000000000000044 $d
     /tmp/ccutzvPw.s:1729   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 $t
     /tmp/ccutzvPw.s:1736   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 HAL_PWREx_EnableUSBVoltageDetector
     /tmp/ccutzvPw.s:1766   .text.HAL_PWREx_EnableUSBVoltageDetector:000000000000001c $d
     /tmp/ccutzvPw.s:1771   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 $t
     /tmp/ccutzvPw.s:1778   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 HAL_PWREx_DisableUSBVoltageDetector
     /tmp/ccutzvPw.s:1808   .text.HAL_PWREx_DisableUSBVoltageDetector:000000000000001c $d
     /tmp/ccutzvPw.s:1813   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 $t
     /tmp/ccutzvPw.s:1820   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 HAL_PWREx_EnableBatteryCharging
     /tmp/ccutzvPw.s:1863   .text.HAL_PWREx_EnableBatteryCharging:0000000000000030 $d
     /tmp/ccutzvPw.s:1868   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 $t
     /tmp/ccutzvPw.s:1875   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 HAL_PWREx_DisableBatteryCharging
     /tmp/ccutzvPw.s:1905   .text.HAL_PWREx_DisableBatteryCharging:000000000000001c $d
     /tmp/ccutzvPw.s:1910   .text.HAL_PWREx_EnableMonitoring:0000000000000000 $t
     /tmp/ccutzvPw.s:1917   .text.HAL_PWREx_EnableMonitoring:0000000000000000 HAL_PWREx_EnableMonitoring
     /tmp/ccutzvPw.s:1947   .text.HAL_PWREx_EnableMonitoring:000000000000001c $d
     /tmp/ccutzvPw.s:1952   .text.HAL_PWREx_DisableMonitoring:0000000000000000 $t
     /tmp/ccutzvPw.s:1959   .text.HAL_PWREx_DisableMonitoring:0000000000000000 HAL_PWREx_DisableMonitoring
     /tmp/ccutzvPw.s:1989   .text.HAL_PWREx_DisableMonitoring:000000000000001c $d
     /tmp/ccutzvPw.s:1994   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 $t
     /tmp/ccutzvPw.s:2001   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 HAL_PWREx_GetTemperatureLevel
     /tmp/ccutzvPw.s:2059   .text.HAL_PWREx_GetTemperatureLevel:0000000000000044 $d
     /tmp/ccutzvPw.s:2064   .text.HAL_PWREx_GetVBATLevel:0000000000000000 $t
     /tmp/ccutzvPw.s:2071   .text.HAL_PWREx_GetVBATLevel:0000000000000000 HAL_PWREx_GetVBATLevel
     /tmp/ccutzvPw.s:2129   .text.HAL_PWREx_GetVBATLevel:0000000000000044 $d
     /tmp/ccutzvPw.s:2134   .text.HAL_PWREx_ConfigAVD:0000000000000000 $t
     /tmp/ccutzvPw.s:2141   .text.HAL_PWREx_ConfigAVD:0000000000000000 HAL_PWREx_ConfigAVD
     /tmp/ccutzvPw.s:2263   .text.HAL_PWREx_ConfigAVD:00000000000000e8 $d
     /tmp/ccutzvPw.s:2268   .text.HAL_PWREx_EnableAVD:0000000000000000 $t
     /tmp/ccutzvPw.s:2275   .text.HAL_PWREx_EnableAVD:0000000000000000 HAL_PWREx_EnableAVD
     /tmp/ccutzvPw.s:2305   .text.HAL_PWREx_EnableAVD:000000000000001c $d
     /tmp/ccutzvPw.s:2310   .text.HAL_PWREx_DisableAVD:0000000000000000 $t
     /tmp/ccutzvPw.s:2317   .text.HAL_PWREx_DisableAVD:0000000000000000 HAL_PWREx_DisableAVD
     /tmp/ccutzvPw.s:2347   .text.HAL_PWREx_DisableAVD:000000000000001c $d
     /tmp/ccutzvPw.s:2352   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 $t
     /tmp/ccutzvPw.s:2359   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 HAL_PWREx_PVD_AVD_IRQHandler
     /tmp/ccutzvPw.s:2435   .text.HAL_PWREx_AVDCallback:0000000000000000 HAL_PWREx_AVDCallback
     /tmp/ccutzvPw.s:2423   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000074 $d
     /tmp/ccutzvPw.s:2428   .text.HAL_PWREx_AVDCallback:0000000000000000 $t
ARM GAS  /tmp/ccutzvPw.s 			page 90



UNDEFINED SYMBOLS
HAL_GetTick
HAL_PWR_PVDCallback
